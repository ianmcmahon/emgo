// +build f469xx
package fmc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f469xx/mmap"
)

type FMC_Bank1_Periph struct {
	BTCR [4]RBTCR
}

func (p *FMC_Bank1_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var FMC_Bank1 = (*FMC_Bank1_Periph)(unsafe.Pointer(uintptr(mmap.FMC_Bank1_R_BASE)))

type RBTCR struct {
	BCR RBCR
	BTR RBTR
}

type BCR uint32

func (b BCR) Field(mask BCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BCR) J(v int) BCR {
	return BCR(bits.MakeField32(v, uint32(mask)))
}

type RBCR struct{ mmio.U32 }

func (r *RBCR) Bits(mask BCR) BCR     { return BCR(r.U32.Bits(uint32(mask))) }
func (r *RBCR) StoreBits(mask, b BCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RBCR) SetBits(mask BCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RBCR) ClearBits(mask BCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RBCR) Load() BCR             { return BCR(r.U32.Load()) }
func (r *RBCR) Store(b BCR)           { r.U32.Store(uint32(b)) }

func (r *RBCR) AtomicStoreBits(mask, b BCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RBCR) AtomicSetBits(mask BCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RBCR) AtomicClearBits(mask BCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMBCR struct{ mmio.UM32 }

func (rm RMBCR) Load() BCR   { return BCR(rm.UM32.Load()) }
func (rm RMBCR) Store(b BCR) { rm.UM32.Store(uint32(b)) }

func (p *FMC_Bank1_Periph) MBKEN(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(MBKEN)}}
}

func (p *FMC_Bank1_Periph) MUXEN(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(MUXEN)}}
}

func (p *FMC_Bank1_Periph) MTYP(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(MTYP)}}
}

func (p *FMC_Bank1_Periph) MWID(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(MWID)}}
}

func (p *FMC_Bank1_Periph) FACCEN(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(FACCEN)}}
}

func (p *FMC_Bank1_Periph) BURSTEN(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(BURSTEN)}}
}

func (p *FMC_Bank1_Periph) WAITPOL(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(WAITPOL)}}
}

func (p *FMC_Bank1_Periph) WAITCFG(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(WAITCFG)}}
}

func (p *FMC_Bank1_Periph) WREN(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(WREN)}}
}

func (p *FMC_Bank1_Periph) WAITEN(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(WAITEN)}}
}

func (p *FMC_Bank1_Periph) EXTMOD(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(EXTMOD)}}
}

func (p *FMC_Bank1_Periph) ASYNCWAIT(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(ASYNCWAIT)}}
}

func (p *FMC_Bank1_Periph) CPSIZE(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(CPSIZE)}}
}

func (p *FMC_Bank1_Periph) CBURSTRW(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(CBURSTRW)}}
}

func (p *FMC_Bank1_Periph) CCLKEN(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(CCLKEN)}}
}

func (p *FMC_Bank1_Periph) WFDIS(n int) RMBCR {
	return RMBCR{mmio.UM32{&p.BTCR[n].BCR.U32, uint32(WFDIS)}}
}

type BTR uint32

func (b BTR) Field(mask BTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BTR) J(v int) BTR {
	return BTR(bits.MakeField32(v, uint32(mask)))
}

type RBTR struct{ mmio.U32 }

func (r *RBTR) Bits(mask BTR) BTR     { return BTR(r.U32.Bits(uint32(mask))) }
func (r *RBTR) StoreBits(mask, b BTR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RBTR) SetBits(mask BTR)      { r.U32.SetBits(uint32(mask)) }
func (r *RBTR) ClearBits(mask BTR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RBTR) Load() BTR             { return BTR(r.U32.Load()) }
func (r *RBTR) Store(b BTR)           { r.U32.Store(uint32(b)) }

func (r *RBTR) AtomicStoreBits(mask, b BTR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RBTR) AtomicSetBits(mask BTR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RBTR) AtomicClearBits(mask BTR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMBTR struct{ mmio.UM32 }

func (rm RMBTR) Load() BTR   { return BTR(rm.UM32.Load()) }
func (rm RMBTR) Store(b BTR) { rm.UM32.Store(uint32(b)) }

func (p *FMC_Bank1_Periph) ADDSET(n int) RMBTR {
	return RMBTR{mmio.UM32{&p.BTCR[n].BTR.U32, uint32(ADDSET)}}
}

func (p *FMC_Bank1_Periph) ADDHLD(n int) RMBTR {
	return RMBTR{mmio.UM32{&p.BTCR[n].BTR.U32, uint32(ADDHLD)}}
}

func (p *FMC_Bank1_Periph) DATAST(n int) RMBTR {
	return RMBTR{mmio.UM32{&p.BTCR[n].BTR.U32, uint32(DATAST)}}
}

func (p *FMC_Bank1_Periph) BUSTURN(n int) RMBTR {
	return RMBTR{mmio.UM32{&p.BTCR[n].BTR.U32, uint32(BUSTURN)}}
}

func (p *FMC_Bank1_Periph) CLKDIV(n int) RMBTR {
	return RMBTR{mmio.UM32{&p.BTCR[n].BTR.U32, uint32(CLKDIV)}}
}

func (p *FMC_Bank1_Periph) DATLAT(n int) RMBTR {
	return RMBTR{mmio.UM32{&p.BTCR[n].BTR.U32, uint32(DATLAT)}}
}

func (p *FMC_Bank1_Periph) ACCMOD(n int) RMBTR {
	return RMBTR{mmio.UM32{&p.BTCR[n].BTR.U32, uint32(ACCMOD)}}
}
