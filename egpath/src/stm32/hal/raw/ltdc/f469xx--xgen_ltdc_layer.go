// +build f469xx

package ltdc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f469xx/mmap"
)

type LTDC_Layer_Periph struct {
	CR     RCR
	WHPCR  RWHPCR
	WVPCR  RWVPCR
	CKCR   RCKCR
	PFCR   RPFCR
	CACR   RCACR
	DCCR   RDCCR
	BFCR   RBFCR
	_      [2]uint32
	CFBAR  RCFBAR
	CFBLR  RCFBLR
	CFBLNR RCFBLNR
	_      [3]uint32
	CLUTWR RCLUTWR
}

func (p *LTDC_Layer_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var LTDC_Layer1 = (*LTDC_Layer_Periph)(unsafe.Pointer(uintptr(mmap.LTDC_Layer1_BASE)))

//emgo:const
var LTDC_Layer2 = (*LTDC_Layer_Periph)(unsafe.Pointer(uintptr(mmap.LTDC_Layer2_BASE)))

type CR uint32

func (b CR) Field(mask CR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR) J(v int) CR {
	return CR(bits.MakeField32(v, uint32(mask)))
}

type RCR struct{ mmio.U32 }

func (r *RCR) Bits(mask CR) CR      { return CR(r.U32.Bits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

func (r *RCR) AtomicStoreBits(mask, b CR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR) AtomicSetBits(mask CR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR) AtomicClearBits(mask CR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

type WHPCR uint32

func (b WHPCR) Field(mask WHPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WHPCR) J(v int) WHPCR {
	return WHPCR(bits.MakeField32(v, uint32(mask)))
}

type RWHPCR struct{ mmio.U32 }

func (r *RWHPCR) Bits(mask WHPCR) WHPCR   { return WHPCR(r.U32.Bits(uint32(mask))) }
func (r *RWHPCR) StoreBits(mask, b WHPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWHPCR) SetBits(mask WHPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RWHPCR) ClearBits(mask WHPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWHPCR) Load() WHPCR             { return WHPCR(r.U32.Load()) }
func (r *RWHPCR) Store(b WHPCR)           { r.U32.Store(uint32(b)) }

func (r *RWHPCR) AtomicStoreBits(mask, b WHPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWHPCR) AtomicSetBits(mask WHPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWHPCR) AtomicClearBits(mask WHPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWHPCR struct{ mmio.UM32 }

func (rm RMWHPCR) Load() WHPCR   { return WHPCR(rm.UM32.Load()) }
func (rm RMWHPCR) Store(b WHPCR) { rm.UM32.Store(uint32(b)) }

type WVPCR uint32

func (b WVPCR) Field(mask WVPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WVPCR) J(v int) WVPCR {
	return WVPCR(bits.MakeField32(v, uint32(mask)))
}

type RWVPCR struct{ mmio.U32 }

func (r *RWVPCR) Bits(mask WVPCR) WVPCR   { return WVPCR(r.U32.Bits(uint32(mask))) }
func (r *RWVPCR) StoreBits(mask, b WVPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWVPCR) SetBits(mask WVPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RWVPCR) ClearBits(mask WVPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWVPCR) Load() WVPCR             { return WVPCR(r.U32.Load()) }
func (r *RWVPCR) Store(b WVPCR)           { r.U32.Store(uint32(b)) }

func (r *RWVPCR) AtomicStoreBits(mask, b WVPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWVPCR) AtomicSetBits(mask WVPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWVPCR) AtomicClearBits(mask WVPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWVPCR struct{ mmio.UM32 }

func (rm RMWVPCR) Load() WVPCR   { return WVPCR(rm.UM32.Load()) }
func (rm RMWVPCR) Store(b WVPCR) { rm.UM32.Store(uint32(b)) }

type CKCR uint32

func (b CKCR) Field(mask CKCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CKCR) J(v int) CKCR {
	return CKCR(bits.MakeField32(v, uint32(mask)))
}

type RCKCR struct{ mmio.U32 }

func (r *RCKCR) Bits(mask CKCR) CKCR    { return CKCR(r.U32.Bits(uint32(mask))) }
func (r *RCKCR) StoreBits(mask, b CKCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCKCR) SetBits(mask CKCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCKCR) ClearBits(mask CKCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCKCR) Load() CKCR             { return CKCR(r.U32.Load()) }
func (r *RCKCR) Store(b CKCR)           { r.U32.Store(uint32(b)) }

func (r *RCKCR) AtomicStoreBits(mask, b CKCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCKCR) AtomicSetBits(mask CKCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCKCR) AtomicClearBits(mask CKCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCKCR struct{ mmio.UM32 }

func (rm RMCKCR) Load() CKCR   { return CKCR(rm.UM32.Load()) }
func (rm RMCKCR) Store(b CKCR) { rm.UM32.Store(uint32(b)) }

type PFCR uint32

func (b PFCR) Field(mask PFCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PFCR) J(v int) PFCR {
	return PFCR(bits.MakeField32(v, uint32(mask)))
}

type RPFCR struct{ mmio.U32 }

func (r *RPFCR) Bits(mask PFCR) PFCR    { return PFCR(r.U32.Bits(uint32(mask))) }
func (r *RPFCR) StoreBits(mask, b PFCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPFCR) SetBits(mask PFCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPFCR) ClearBits(mask PFCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPFCR) Load() PFCR             { return PFCR(r.U32.Load()) }
func (r *RPFCR) Store(b PFCR)           { r.U32.Store(uint32(b)) }

func (r *RPFCR) AtomicStoreBits(mask, b PFCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPFCR) AtomicSetBits(mask PFCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPFCR) AtomicClearBits(mask PFCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPFCR struct{ mmio.UM32 }

func (rm RMPFCR) Load() PFCR   { return PFCR(rm.UM32.Load()) }
func (rm RMPFCR) Store(b PFCR) { rm.UM32.Store(uint32(b)) }

type CACR uint32

func (b CACR) Field(mask CACR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CACR) J(v int) CACR {
	return CACR(bits.MakeField32(v, uint32(mask)))
}

type RCACR struct{ mmio.U32 }

func (r *RCACR) Bits(mask CACR) CACR    { return CACR(r.U32.Bits(uint32(mask))) }
func (r *RCACR) StoreBits(mask, b CACR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCACR) SetBits(mask CACR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCACR) ClearBits(mask CACR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCACR) Load() CACR             { return CACR(r.U32.Load()) }
func (r *RCACR) Store(b CACR)           { r.U32.Store(uint32(b)) }

func (r *RCACR) AtomicStoreBits(mask, b CACR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCACR) AtomicSetBits(mask CACR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCACR) AtomicClearBits(mask CACR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCACR struct{ mmio.UM32 }

func (rm RMCACR) Load() CACR   { return CACR(rm.UM32.Load()) }
func (rm RMCACR) Store(b CACR) { rm.UM32.Store(uint32(b)) }

type DCCR uint32

func (b DCCR) Field(mask DCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DCCR) J(v int) DCCR {
	return DCCR(bits.MakeField32(v, uint32(mask)))
}

type RDCCR struct{ mmio.U32 }

func (r *RDCCR) Bits(mask DCCR) DCCR    { return DCCR(r.U32.Bits(uint32(mask))) }
func (r *RDCCR) StoreBits(mask, b DCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDCCR) SetBits(mask DCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RDCCR) ClearBits(mask DCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDCCR) Load() DCCR             { return DCCR(r.U32.Load()) }
func (r *RDCCR) Store(b DCCR)           { r.U32.Store(uint32(b)) }

func (r *RDCCR) AtomicStoreBits(mask, b DCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RDCCR) AtomicSetBits(mask DCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RDCCR) AtomicClearBits(mask DCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMDCCR struct{ mmio.UM32 }

func (rm RMDCCR) Load() DCCR   { return DCCR(rm.UM32.Load()) }
func (rm RMDCCR) Store(b DCCR) { rm.UM32.Store(uint32(b)) }

type BFCR uint32

func (b BFCR) Field(mask BFCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BFCR) J(v int) BFCR {
	return BFCR(bits.MakeField32(v, uint32(mask)))
}

type RBFCR struct{ mmio.U32 }

func (r *RBFCR) Bits(mask BFCR) BFCR    { return BFCR(r.U32.Bits(uint32(mask))) }
func (r *RBFCR) StoreBits(mask, b BFCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RBFCR) SetBits(mask BFCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RBFCR) ClearBits(mask BFCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RBFCR) Load() BFCR             { return BFCR(r.U32.Load()) }
func (r *RBFCR) Store(b BFCR)           { r.U32.Store(uint32(b)) }

func (r *RBFCR) AtomicStoreBits(mask, b BFCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RBFCR) AtomicSetBits(mask BFCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RBFCR) AtomicClearBits(mask BFCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMBFCR struct{ mmio.UM32 }

func (rm RMBFCR) Load() BFCR   { return BFCR(rm.UM32.Load()) }
func (rm RMBFCR) Store(b BFCR) { rm.UM32.Store(uint32(b)) }

type CFBAR uint32

func (b CFBAR) Field(mask CFBAR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFBAR) J(v int) CFBAR {
	return CFBAR(bits.MakeField32(v, uint32(mask)))
}

type RCFBAR struct{ mmio.U32 }

func (r *RCFBAR) Bits(mask CFBAR) CFBAR   { return CFBAR(r.U32.Bits(uint32(mask))) }
func (r *RCFBAR) StoreBits(mask, b CFBAR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFBAR) SetBits(mask CFBAR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCFBAR) ClearBits(mask CFBAR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCFBAR) Load() CFBAR             { return CFBAR(r.U32.Load()) }
func (r *RCFBAR) Store(b CFBAR)           { r.U32.Store(uint32(b)) }

func (r *RCFBAR) AtomicStoreBits(mask, b CFBAR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCFBAR) AtomicSetBits(mask CFBAR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCFBAR) AtomicClearBits(mask CFBAR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCFBAR struct{ mmio.UM32 }

func (rm RMCFBAR) Load() CFBAR   { return CFBAR(rm.UM32.Load()) }
func (rm RMCFBAR) Store(b CFBAR) { rm.UM32.Store(uint32(b)) }

type CFBLR uint32

func (b CFBLR) Field(mask CFBLR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFBLR) J(v int) CFBLR {
	return CFBLR(bits.MakeField32(v, uint32(mask)))
}

type RCFBLR struct{ mmio.U32 }

func (r *RCFBLR) Bits(mask CFBLR) CFBLR   { return CFBLR(r.U32.Bits(uint32(mask))) }
func (r *RCFBLR) StoreBits(mask, b CFBLR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFBLR) SetBits(mask CFBLR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCFBLR) ClearBits(mask CFBLR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCFBLR) Load() CFBLR             { return CFBLR(r.U32.Load()) }
func (r *RCFBLR) Store(b CFBLR)           { r.U32.Store(uint32(b)) }

func (r *RCFBLR) AtomicStoreBits(mask, b CFBLR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCFBLR) AtomicSetBits(mask CFBLR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCFBLR) AtomicClearBits(mask CFBLR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCFBLR struct{ mmio.UM32 }

func (rm RMCFBLR) Load() CFBLR   { return CFBLR(rm.UM32.Load()) }
func (rm RMCFBLR) Store(b CFBLR) { rm.UM32.Store(uint32(b)) }

type CFBLNR uint32

func (b CFBLNR) Field(mask CFBLNR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFBLNR) J(v int) CFBLNR {
	return CFBLNR(bits.MakeField32(v, uint32(mask)))
}

type RCFBLNR struct{ mmio.U32 }

func (r *RCFBLNR) Bits(mask CFBLNR) CFBLNR  { return CFBLNR(r.U32.Bits(uint32(mask))) }
func (r *RCFBLNR) StoreBits(mask, b CFBLNR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFBLNR) SetBits(mask CFBLNR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCFBLNR) ClearBits(mask CFBLNR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCFBLNR) Load() CFBLNR             { return CFBLNR(r.U32.Load()) }
func (r *RCFBLNR) Store(b CFBLNR)           { r.U32.Store(uint32(b)) }

func (r *RCFBLNR) AtomicStoreBits(mask, b CFBLNR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCFBLNR) AtomicSetBits(mask CFBLNR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCFBLNR) AtomicClearBits(mask CFBLNR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCFBLNR struct{ mmio.UM32 }

func (rm RMCFBLNR) Load() CFBLNR   { return CFBLNR(rm.UM32.Load()) }
func (rm RMCFBLNR) Store(b CFBLNR) { rm.UM32.Store(uint32(b)) }

type CLUTWR uint32

func (b CLUTWR) Field(mask CLUTWR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CLUTWR) J(v int) CLUTWR {
	return CLUTWR(bits.MakeField32(v, uint32(mask)))
}

type RCLUTWR struct{ mmio.U32 }

func (r *RCLUTWR) Bits(mask CLUTWR) CLUTWR  { return CLUTWR(r.U32.Bits(uint32(mask))) }
func (r *RCLUTWR) StoreBits(mask, b CLUTWR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLUTWR) SetBits(mask CLUTWR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCLUTWR) ClearBits(mask CLUTWR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCLUTWR) Load() CLUTWR             { return CLUTWR(r.U32.Load()) }
func (r *RCLUTWR) Store(b CLUTWR)           { r.U32.Store(uint32(b)) }

func (r *RCLUTWR) AtomicStoreBits(mask, b CLUTWR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCLUTWR) AtomicSetBits(mask CLUTWR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCLUTWR) AtomicClearBits(mask CLUTWR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCLUTWR struct{ mmio.UM32 }

func (rm RMCLUTWR) Load() CLUTWR   { return CLUTWR(rm.UM32.Load()) }
func (rm RMCLUTWR) Store(b CLUTWR) { rm.UM32.Store(uint32(b)) }
