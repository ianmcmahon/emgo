package usb

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"/Users/ian/code/src/github.com/ianmcmahon/emgo/egpath/src/stm32/o/f469xx/mmap"
)

type USB_OTG_Global_Periph struct {
	GOTGCTL            RGOTGCTL
	GOTGINT            RGOTGINT
	GAHBCFG            RGAHBCFG
	GUSBCFG            RGUSBCFG
	GRSTCTL            RGRSTCTL
	GINTSTS            RGINTSTS
	GINTMSK            RGINTMSK
	GRXSTSR            RGRXSTSR
	GRXSTSP            RGRXSTSP
	GRXFSIZ            RGRXFSIZ
	DIEPTXF0_HNPTXFSIZ RDIEPTXF0_HNPTXFSIZ
	HNPTXSTS           RHNPTXSTS
	_                  [2]uint32
	GCCFG              RGCCFG
	CID                RCID
	_                  [3]uint32
	GHWCFG3            RGHWCFG3
	_                  uint32
	GLPMCFG            RGLPMCFG
	_                  uint32
	GDFIFOCFG          RGDFIFOCFG
	_                  [40]uint32
	HPTXFSIZ           RHPTXFSIZ
	DIEPTXF            [15]RDIEPTXF
}

func (p *USB_OTG_Global_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type GOTGCTL uint32

func (b GOTGCTL) Field(mask GOTGCTL) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GOTGCTL) J(v int) GOTGCTL {
	return GOTGCTL(bits.MakeField32(v, uint32(mask)))
}

type RGOTGCTL struct{ mmio.U32 }

func (r *RGOTGCTL) Bits(mask GOTGCTL) GOTGCTL { return GOTGCTL(r.U32.Bits(uint32(mask))) }
func (r *RGOTGCTL) StoreBits(mask, b GOTGCTL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGOTGCTL) SetBits(mask GOTGCTL)      { r.U32.SetBits(uint32(mask)) }
func (r *RGOTGCTL) ClearBits(mask GOTGCTL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGOTGCTL) Load() GOTGCTL             { return GOTGCTL(r.U32.Load()) }
func (r *RGOTGCTL) Store(b GOTGCTL)           { r.U32.Store(uint32(b)) }

func (r *RGOTGCTL) AtomicStoreBits(mask, b GOTGCTL) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGOTGCTL) AtomicSetBits(mask GOTGCTL)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGOTGCTL) AtomicClearBits(mask GOTGCTL)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGOTGCTL struct{ mmio.UM32 }

func (rm RMGOTGCTL) Load() GOTGCTL   { return GOTGCTL(rm.UM32.Load()) }
func (rm RMGOTGCTL) Store(b GOTGCTL) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) SRQSCS() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(SRQSCS)}}
}

func (p *USB_OTG_Global_Periph) SRQ() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(SRQ)}}
}

func (p *USB_OTG_Global_Periph) VBVALOEN() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(VBVALOEN)}}
}

func (p *USB_OTG_Global_Periph) VBVALOVAL() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(VBVALOVAL)}}
}

func (p *USB_OTG_Global_Periph) AVALOEN() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(AVALOEN)}}
}

func (p *USB_OTG_Global_Periph) AVALOVAL() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(AVALOVAL)}}
}

func (p *USB_OTG_Global_Periph) BVALOEN() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(BVALOEN)}}
}

func (p *USB_OTG_Global_Periph) BVALOVAL() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(BVALOVAL)}}
}

func (p *USB_OTG_Global_Periph) HNGSCS() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(HNGSCS)}}
}

func (p *USB_OTG_Global_Periph) HNPRQ() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(HNPRQ)}}
}

func (p *USB_OTG_Global_Periph) HSHNPEN() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(HSHNPEN)}}
}

func (p *USB_OTG_Global_Periph) DHNPEN() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(DHNPEN)}}
}

func (p *USB_OTG_Global_Periph) EHEN() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(EHEN)}}
}

func (p *USB_OTG_Global_Periph) CIDSTS() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(CIDSTS)}}
}

func (p *USB_OTG_Global_Periph) DBCT() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(DBCT)}}
}

func (p *USB_OTG_Global_Periph) ASVLD() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(ASVLD)}}
}

func (p *USB_OTG_Global_Periph) BSESVLD() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(BSESVLD)}}
}

func (p *USB_OTG_Global_Periph) OTGVER() RMGOTGCTL {
	return RMGOTGCTL{mmio.UM32{&p.GOTGCTL.U32, uint32(OTGVER)}}
}

type GOTGINT uint32

func (b GOTGINT) Field(mask GOTGINT) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GOTGINT) J(v int) GOTGINT {
	return GOTGINT(bits.MakeField32(v, uint32(mask)))
}

type RGOTGINT struct{ mmio.U32 }

func (r *RGOTGINT) Bits(mask GOTGINT) GOTGINT { return GOTGINT(r.U32.Bits(uint32(mask))) }
func (r *RGOTGINT) StoreBits(mask, b GOTGINT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGOTGINT) SetBits(mask GOTGINT)      { r.U32.SetBits(uint32(mask)) }
func (r *RGOTGINT) ClearBits(mask GOTGINT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGOTGINT) Load() GOTGINT             { return GOTGINT(r.U32.Load()) }
func (r *RGOTGINT) Store(b GOTGINT)           { r.U32.Store(uint32(b)) }

func (r *RGOTGINT) AtomicStoreBits(mask, b GOTGINT) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGOTGINT) AtomicSetBits(mask GOTGINT)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGOTGINT) AtomicClearBits(mask GOTGINT)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGOTGINT struct{ mmio.UM32 }

func (rm RMGOTGINT) Load() GOTGINT   { return GOTGINT(rm.UM32.Load()) }
func (rm RMGOTGINT) Store(b GOTGINT) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) SEDET() RMGOTGINT {
	return RMGOTGINT{mmio.UM32{&p.GOTGINT.U32, uint32(SEDET)}}
}

func (p *USB_OTG_Global_Periph) SRSSCHG() RMGOTGINT {
	return RMGOTGINT{mmio.UM32{&p.GOTGINT.U32, uint32(SRSSCHG)}}
}

func (p *USB_OTG_Global_Periph) HNSSCHG() RMGOTGINT {
	return RMGOTGINT{mmio.UM32{&p.GOTGINT.U32, uint32(HNSSCHG)}}
}

func (p *USB_OTG_Global_Periph) HNGDET() RMGOTGINT {
	return RMGOTGINT{mmio.UM32{&p.GOTGINT.U32, uint32(HNGDET)}}
}

func (p *USB_OTG_Global_Periph) ADTOCHG() RMGOTGINT {
	return RMGOTGINT{mmio.UM32{&p.GOTGINT.U32, uint32(ADTOCHG)}}
}

func (p *USB_OTG_Global_Periph) DBCDNE() RMGOTGINT {
	return RMGOTGINT{mmio.UM32{&p.GOTGINT.U32, uint32(DBCDNE)}}
}

func (p *USB_OTG_Global_Periph) IDCHNG() RMGOTGINT {
	return RMGOTGINT{mmio.UM32{&p.GOTGINT.U32, uint32(IDCHNG)}}
}

type GAHBCFG uint32

func (b GAHBCFG) Field(mask GAHBCFG) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GAHBCFG) J(v int) GAHBCFG {
	return GAHBCFG(bits.MakeField32(v, uint32(mask)))
}

type RGAHBCFG struct{ mmio.U32 }

func (r *RGAHBCFG) Bits(mask GAHBCFG) GAHBCFG { return GAHBCFG(r.U32.Bits(uint32(mask))) }
func (r *RGAHBCFG) StoreBits(mask, b GAHBCFG) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGAHBCFG) SetBits(mask GAHBCFG)      { r.U32.SetBits(uint32(mask)) }
func (r *RGAHBCFG) ClearBits(mask GAHBCFG)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGAHBCFG) Load() GAHBCFG             { return GAHBCFG(r.U32.Load()) }
func (r *RGAHBCFG) Store(b GAHBCFG)           { r.U32.Store(uint32(b)) }

func (r *RGAHBCFG) AtomicStoreBits(mask, b GAHBCFG) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGAHBCFG) AtomicSetBits(mask GAHBCFG)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGAHBCFG) AtomicClearBits(mask GAHBCFG)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGAHBCFG struct{ mmio.UM32 }

func (rm RMGAHBCFG) Load() GAHBCFG   { return GAHBCFG(rm.UM32.Load()) }
func (rm RMGAHBCFG) Store(b GAHBCFG) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) GINT() RMGAHBCFG {
	return RMGAHBCFG{mmio.UM32{&p.GAHBCFG.U32, uint32(GINT)}}
}

func (p *USB_OTG_Global_Periph) HBSTLEN() RMGAHBCFG {
	return RMGAHBCFG{mmio.UM32{&p.GAHBCFG.U32, uint32(HBSTLEN)}}
}

func (p *USB_OTG_Global_Periph) DMAEN() RMGAHBCFG {
	return RMGAHBCFG{mmio.UM32{&p.GAHBCFG.U32, uint32(DMAEN)}}
}

func (p *USB_OTG_Global_Periph) TXFELVL() RMGAHBCFG {
	return RMGAHBCFG{mmio.UM32{&p.GAHBCFG.U32, uint32(TXFELVL)}}
}

func (p *USB_OTG_Global_Periph) PTXFELVL() RMGAHBCFG {
	return RMGAHBCFG{mmio.UM32{&p.GAHBCFG.U32, uint32(PTXFELVL)}}
}

type GUSBCFG uint32

func (b GUSBCFG) Field(mask GUSBCFG) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GUSBCFG) J(v int) GUSBCFG {
	return GUSBCFG(bits.MakeField32(v, uint32(mask)))
}

type RGUSBCFG struct{ mmio.U32 }

func (r *RGUSBCFG) Bits(mask GUSBCFG) GUSBCFG { return GUSBCFG(r.U32.Bits(uint32(mask))) }
func (r *RGUSBCFG) StoreBits(mask, b GUSBCFG) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGUSBCFG) SetBits(mask GUSBCFG)      { r.U32.SetBits(uint32(mask)) }
func (r *RGUSBCFG) ClearBits(mask GUSBCFG)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGUSBCFG) Load() GUSBCFG             { return GUSBCFG(r.U32.Load()) }
func (r *RGUSBCFG) Store(b GUSBCFG)           { r.U32.Store(uint32(b)) }

func (r *RGUSBCFG) AtomicStoreBits(mask, b GUSBCFG) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGUSBCFG) AtomicSetBits(mask GUSBCFG)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGUSBCFG) AtomicClearBits(mask GUSBCFG)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGUSBCFG struct{ mmio.UM32 }

func (rm RMGUSBCFG) Load() GUSBCFG   { return GUSBCFG(rm.UM32.Load()) }
func (rm RMGUSBCFG) Store(b GUSBCFG) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) TOCAL() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(TOCAL)}}
}

func (p *USB_OTG_Global_Periph) PHYSEL() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(PHYSEL)}}
}

func (p *USB_OTG_Global_Periph) SRPCAP() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(SRPCAP)}}
}

func (p *USB_OTG_Global_Periph) HNPCAP() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(HNPCAP)}}
}

func (p *USB_OTG_Global_Periph) TRDT() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(TRDT)}}
}

func (p *USB_OTG_Global_Periph) PHYLPCS() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(PHYLPCS)}}
}

func (p *USB_OTG_Global_Periph) ULPIFSLS() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(ULPIFSLS)}}
}

func (p *USB_OTG_Global_Periph) ULPIAR() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(ULPIAR)}}
}

func (p *USB_OTG_Global_Periph) ULPICSM() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(ULPICSM)}}
}

func (p *USB_OTG_Global_Periph) ULPIEVBUSD() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(ULPIEVBUSD)}}
}

func (p *USB_OTG_Global_Periph) ULPIEVBUSI() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(ULPIEVBUSI)}}
}

func (p *USB_OTG_Global_Periph) TSDPS() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(TSDPS)}}
}

func (p *USB_OTG_Global_Periph) PCCI() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(PCCI)}}
}

func (p *USB_OTG_Global_Periph) PTCI() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(PTCI)}}
}

func (p *USB_OTG_Global_Periph) ULPIIPD() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(ULPIIPD)}}
}

func (p *USB_OTG_Global_Periph) FHMOD() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(FHMOD)}}
}

func (p *USB_OTG_Global_Periph) FDMOD() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(FDMOD)}}
}

func (p *USB_OTG_Global_Periph) CTXPKT() RMGUSBCFG {
	return RMGUSBCFG{mmio.UM32{&p.GUSBCFG.U32, uint32(CTXPKT)}}
}

type GRSTCTL uint32

func (b GRSTCTL) Field(mask GRSTCTL) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GRSTCTL) J(v int) GRSTCTL {
	return GRSTCTL(bits.MakeField32(v, uint32(mask)))
}

type RGRSTCTL struct{ mmio.U32 }

func (r *RGRSTCTL) Bits(mask GRSTCTL) GRSTCTL { return GRSTCTL(r.U32.Bits(uint32(mask))) }
func (r *RGRSTCTL) StoreBits(mask, b GRSTCTL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGRSTCTL) SetBits(mask GRSTCTL)      { r.U32.SetBits(uint32(mask)) }
func (r *RGRSTCTL) ClearBits(mask GRSTCTL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGRSTCTL) Load() GRSTCTL             { return GRSTCTL(r.U32.Load()) }
func (r *RGRSTCTL) Store(b GRSTCTL)           { r.U32.Store(uint32(b)) }

func (r *RGRSTCTL) AtomicStoreBits(mask, b GRSTCTL) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGRSTCTL) AtomicSetBits(mask GRSTCTL)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGRSTCTL) AtomicClearBits(mask GRSTCTL)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGRSTCTL struct{ mmio.UM32 }

func (rm RMGRSTCTL) Load() GRSTCTL   { return GRSTCTL(rm.UM32.Load()) }
func (rm RMGRSTCTL) Store(b GRSTCTL) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) CSRST() RMGRSTCTL {
	return RMGRSTCTL{mmio.UM32{&p.GRSTCTL.U32, uint32(CSRST)}}
}

func (p *USB_OTG_Global_Periph) HSRST() RMGRSTCTL {
	return RMGRSTCTL{mmio.UM32{&p.GRSTCTL.U32, uint32(HSRST)}}
}

func (p *USB_OTG_Global_Periph) FCRST() RMGRSTCTL {
	return RMGRSTCTL{mmio.UM32{&p.GRSTCTL.U32, uint32(FCRST)}}
}

func (p *USB_OTG_Global_Periph) RXFFLSH() RMGRSTCTL {
	return RMGRSTCTL{mmio.UM32{&p.GRSTCTL.U32, uint32(RXFFLSH)}}
}

func (p *USB_OTG_Global_Periph) TXFFLSH() RMGRSTCTL {
	return RMGRSTCTL{mmio.UM32{&p.GRSTCTL.U32, uint32(TXFFLSH)}}
}

func (p *USB_OTG_Global_Periph) TXFNUM() RMGRSTCTL {
	return RMGRSTCTL{mmio.UM32{&p.GRSTCTL.U32, uint32(TXFNUM)}}
}

func (p *USB_OTG_Global_Periph) DMAREQ() RMGRSTCTL {
	return RMGRSTCTL{mmio.UM32{&p.GRSTCTL.U32, uint32(DMAREQ)}}
}

func (p *USB_OTG_Global_Periph) AHBIDL() RMGRSTCTL {
	return RMGRSTCTL{mmio.UM32{&p.GRSTCTL.U32, uint32(AHBIDL)}}
}

type GINTSTS uint32

func (b GINTSTS) Field(mask GINTSTS) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GINTSTS) J(v int) GINTSTS {
	return GINTSTS(bits.MakeField32(v, uint32(mask)))
}

type RGINTSTS struct{ mmio.U32 }

func (r *RGINTSTS) Bits(mask GINTSTS) GINTSTS { return GINTSTS(r.U32.Bits(uint32(mask))) }
func (r *RGINTSTS) StoreBits(mask, b GINTSTS) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGINTSTS) SetBits(mask GINTSTS)      { r.U32.SetBits(uint32(mask)) }
func (r *RGINTSTS) ClearBits(mask GINTSTS)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGINTSTS) Load() GINTSTS             { return GINTSTS(r.U32.Load()) }
func (r *RGINTSTS) Store(b GINTSTS)           { r.U32.Store(uint32(b)) }

func (r *RGINTSTS) AtomicStoreBits(mask, b GINTSTS) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGINTSTS) AtomicSetBits(mask GINTSTS)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGINTSTS) AtomicClearBits(mask GINTSTS)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGINTSTS struct{ mmio.UM32 }

func (rm RMGINTSTS) Load() GINTSTS   { return GINTSTS(rm.UM32.Load()) }
func (rm RMGINTSTS) Store(b GINTSTS) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) CMOD() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(CMOD)}}
}

func (p *USB_OTG_Global_Periph) MMIS() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(MMIS)}}
}

func (p *USB_OTG_Global_Periph) OTGINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(OTGINT)}}
}

func (p *USB_OTG_Global_Periph) SOF() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(SOF)}}
}

func (p *USB_OTG_Global_Periph) RXFLVL() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(RXFLVL)}}
}

func (p *USB_OTG_Global_Periph) NPTXFE() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(NPTXFE)}}
}

func (p *USB_OTG_Global_Periph) GINAKEFF() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(GINAKEFF)}}
}

func (p *USB_OTG_Global_Periph) BOUTNAKEFF() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(BOUTNAKEFF)}}
}

func (p *USB_OTG_Global_Periph) ESUSP() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(ESUSP)}}
}

func (p *USB_OTG_Global_Periph) USBSUSP() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(USBSUSP)}}
}

func (p *USB_OTG_Global_Periph) USBRST() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(USBRST)}}
}

func (p *USB_OTG_Global_Periph) ENUMDNE() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(ENUMDNE)}}
}

func (p *USB_OTG_Global_Periph) ISOODRP() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(ISOODRP)}}
}

func (p *USB_OTG_Global_Periph) EOPF() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(EOPF)}}
}

func (p *USB_OTG_Global_Periph) IEPINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(IEPINT)}}
}

func (p *USB_OTG_Global_Periph) OEPINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(OEPINT)}}
}

func (p *USB_OTG_Global_Periph) IISOIXFR() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(IISOIXFR)}}
}

func (p *USB_OTG_Global_Periph) PXFR_INCOMPISOOUT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(PXFR_INCOMPISOOUT)}}
}

func (p *USB_OTG_Global_Periph) DATAFSUSP() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(DATAFSUSP)}}
}

func (p *USB_OTG_Global_Periph) RSTDET() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(RSTDET)}}
}

func (p *USB_OTG_Global_Periph) HPRTINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(HPRTINT)}}
}

func (p *USB_OTG_Global_Periph) HCINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(HCINT)}}
}

func (p *USB_OTG_Global_Periph) PTXFE() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(PTXFE)}}
}

func (p *USB_OTG_Global_Periph) LPMINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(LPMINT)}}
}

func (p *USB_OTG_Global_Periph) CIDSCHG() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(CIDSCHG)}}
}

func (p *USB_OTG_Global_Periph) DISCINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(DISCINT)}}
}

func (p *USB_OTG_Global_Periph) SRQINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(SRQINT)}}
}

func (p *USB_OTG_Global_Periph) WKUINT() RMGINTSTS {
	return RMGINTSTS{mmio.UM32{&p.GINTSTS.U32, uint32(WKUINT)}}
}

type GINTMSK uint32

func (b GINTMSK) Field(mask GINTMSK) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GINTMSK) J(v int) GINTMSK {
	return GINTMSK(bits.MakeField32(v, uint32(mask)))
}

type RGINTMSK struct{ mmio.U32 }

func (r *RGINTMSK) Bits(mask GINTMSK) GINTMSK { return GINTMSK(r.U32.Bits(uint32(mask))) }
func (r *RGINTMSK) StoreBits(mask, b GINTMSK) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGINTMSK) SetBits(mask GINTMSK)      { r.U32.SetBits(uint32(mask)) }
func (r *RGINTMSK) ClearBits(mask GINTMSK)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGINTMSK) Load() GINTMSK             { return GINTMSK(r.U32.Load()) }
func (r *RGINTMSK) Store(b GINTMSK)           { r.U32.Store(uint32(b)) }

func (r *RGINTMSK) AtomicStoreBits(mask, b GINTMSK) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGINTMSK) AtomicSetBits(mask GINTMSK)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGINTMSK) AtomicClearBits(mask GINTMSK)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGINTMSK struct{ mmio.UM32 }

func (rm RMGINTMSK) Load() GINTMSK   { return GINTMSK(rm.UM32.Load()) }
func (rm RMGINTMSK) Store(b GINTMSK) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) MMISM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(MMISM)}}
}

func (p *USB_OTG_Global_Periph) OTGINT() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(OTGINT)}}
}

func (p *USB_OTG_Global_Periph) SOFM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(SOFM)}}
}

func (p *USB_OTG_Global_Periph) RXFLVLM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(RXFLVLM)}}
}

func (p *USB_OTG_Global_Periph) NPTXFEM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(NPTXFEM)}}
}

func (p *USB_OTG_Global_Periph) GINAKEFFM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(GINAKEFFM)}}
}

func (p *USB_OTG_Global_Periph) GONAKEFFM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(GONAKEFFM)}}
}

func (p *USB_OTG_Global_Periph) ESUSPM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(ESUSPM)}}
}

func (p *USB_OTG_Global_Periph) USBSUSPM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(USBSUSPM)}}
}

func (p *USB_OTG_Global_Periph) USBRST() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(USBRST)}}
}

func (p *USB_OTG_Global_Periph) ENUMDNEM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(ENUMDNEM)}}
}

func (p *USB_OTG_Global_Periph) ISOODRPM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(ISOODRPM)}}
}

func (p *USB_OTG_Global_Periph) EOPFM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(EOPFM)}}
}

func (p *USB_OTG_Global_Periph) EPMISM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(EPMISM)}}
}

func (p *USB_OTG_Global_Periph) IEPINT() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(IEPINT)}}
}

func (p *USB_OTG_Global_Periph) OEPINT() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(OEPINT)}}
}

func (p *USB_OTG_Global_Periph) IISOIXFRM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(IISOIXFRM)}}
}

func (p *USB_OTG_Global_Periph) PXFRM_IISOOXFRM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(PXFRM_IISOOXFRM)}}
}

func (p *USB_OTG_Global_Periph) FSUSPM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(FSUSPM)}}
}

func (p *USB_OTG_Global_Periph) RSTDEM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(RSTDEM)}}
}

func (p *USB_OTG_Global_Periph) PRTIM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(PRTIM)}}
}

func (p *USB_OTG_Global_Periph) HCIM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(HCIM)}}
}

func (p *USB_OTG_Global_Periph) PTXFEM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(PTXFEM)}}
}

func (p *USB_OTG_Global_Periph) LPMINTM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(LPMINTM)}}
}

func (p *USB_OTG_Global_Periph) CIDSCHGM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(CIDSCHGM)}}
}

func (p *USB_OTG_Global_Periph) DISCINT() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(DISCINT)}}
}

func (p *USB_OTG_Global_Periph) SRQIM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(SRQIM)}}
}

func (p *USB_OTG_Global_Periph) WUIM() RMGINTMSK {
	return RMGINTMSK{mmio.UM32{&p.GINTMSK.U32, uint32(WUIM)}}
}

type GRXSTSR uint32

func (b GRXSTSR) Field(mask GRXSTSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GRXSTSR) J(v int) GRXSTSR {
	return GRXSTSR(bits.MakeField32(v, uint32(mask)))
}

type RGRXSTSR struct{ mmio.U32 }

func (r *RGRXSTSR) Bits(mask GRXSTSR) GRXSTSR { return GRXSTSR(r.U32.Bits(uint32(mask))) }
func (r *RGRXSTSR) StoreBits(mask, b GRXSTSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGRXSTSR) SetBits(mask GRXSTSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RGRXSTSR) ClearBits(mask GRXSTSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGRXSTSR) Load() GRXSTSR             { return GRXSTSR(r.U32.Load()) }
func (r *RGRXSTSR) Store(b GRXSTSR)           { r.U32.Store(uint32(b)) }

func (r *RGRXSTSR) AtomicStoreBits(mask, b GRXSTSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGRXSTSR) AtomicSetBits(mask GRXSTSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGRXSTSR) AtomicClearBits(mask GRXSTSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGRXSTSR struct{ mmio.UM32 }

func (rm RMGRXSTSR) Load() GRXSTSR   { return GRXSTSR(rm.UM32.Load()) }
func (rm RMGRXSTSR) Store(b GRXSTSR) { rm.UM32.Store(uint32(b)) }

type GRXSTSP uint32

func (b GRXSTSP) Field(mask GRXSTSP) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GRXSTSP) J(v int) GRXSTSP {
	return GRXSTSP(bits.MakeField32(v, uint32(mask)))
}

type RGRXSTSP struct{ mmio.U32 }

func (r *RGRXSTSP) Bits(mask GRXSTSP) GRXSTSP { return GRXSTSP(r.U32.Bits(uint32(mask))) }
func (r *RGRXSTSP) StoreBits(mask, b GRXSTSP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGRXSTSP) SetBits(mask GRXSTSP)      { r.U32.SetBits(uint32(mask)) }
func (r *RGRXSTSP) ClearBits(mask GRXSTSP)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGRXSTSP) Load() GRXSTSP             { return GRXSTSP(r.U32.Load()) }
func (r *RGRXSTSP) Store(b GRXSTSP)           { r.U32.Store(uint32(b)) }

func (r *RGRXSTSP) AtomicStoreBits(mask, b GRXSTSP) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGRXSTSP) AtomicSetBits(mask GRXSTSP)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGRXSTSP) AtomicClearBits(mask GRXSTSP)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGRXSTSP struct{ mmio.UM32 }

func (rm RMGRXSTSP) Load() GRXSTSP   { return GRXSTSP(rm.UM32.Load()) }
func (rm RMGRXSTSP) Store(b GRXSTSP) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) EPNUM() RMGRXSTSP {
	return RMGRXSTSP{mmio.UM32{&p.GRXSTSP.U32, uint32(EPNUM)}}
}

func (p *USB_OTG_Global_Periph) BCNT() RMGRXSTSP {
	return RMGRXSTSP{mmio.UM32{&p.GRXSTSP.U32, uint32(BCNT)}}
}

func (p *USB_OTG_Global_Periph) DPID() RMGRXSTSP {
	return RMGRXSTSP{mmio.UM32{&p.GRXSTSP.U32, uint32(DPID)}}
}

func (p *USB_OTG_Global_Periph) PKTSTS() RMGRXSTSP {
	return RMGRXSTSP{mmio.UM32{&p.GRXSTSP.U32, uint32(PKTSTS)}}
}

type GRXFSIZ uint32

func (b GRXFSIZ) Field(mask GRXFSIZ) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GRXFSIZ) J(v int) GRXFSIZ {
	return GRXFSIZ(bits.MakeField32(v, uint32(mask)))
}

type RGRXFSIZ struct{ mmio.U32 }

func (r *RGRXFSIZ) Bits(mask GRXFSIZ) GRXFSIZ { return GRXFSIZ(r.U32.Bits(uint32(mask))) }
func (r *RGRXFSIZ) StoreBits(mask, b GRXFSIZ) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGRXFSIZ) SetBits(mask GRXFSIZ)      { r.U32.SetBits(uint32(mask)) }
func (r *RGRXFSIZ) ClearBits(mask GRXFSIZ)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGRXFSIZ) Load() GRXFSIZ             { return GRXFSIZ(r.U32.Load()) }
func (r *RGRXFSIZ) Store(b GRXFSIZ)           { r.U32.Store(uint32(b)) }

func (r *RGRXFSIZ) AtomicStoreBits(mask, b GRXFSIZ) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGRXFSIZ) AtomicSetBits(mask GRXFSIZ)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGRXFSIZ) AtomicClearBits(mask GRXFSIZ)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGRXFSIZ struct{ mmio.UM32 }

func (rm RMGRXFSIZ) Load() GRXFSIZ   { return GRXFSIZ(rm.UM32.Load()) }
func (rm RMGRXFSIZ) Store(b GRXFSIZ) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) RXFD() RMGRXFSIZ {
	return RMGRXFSIZ{mmio.UM32{&p.GRXFSIZ.U32, uint32(RXFD)}}
}

type DIEPTXF0_HNPTXFSIZ uint32

func (b DIEPTXF0_HNPTXFSIZ) Field(mask DIEPTXF0_HNPTXFSIZ) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DIEPTXF0_HNPTXFSIZ) J(v int) DIEPTXF0_HNPTXFSIZ {
	return DIEPTXF0_HNPTXFSIZ(bits.MakeField32(v, uint32(mask)))
}

type RDIEPTXF0_HNPTXFSIZ struct{ mmio.U32 }

func (r *RDIEPTXF0_HNPTXFSIZ) Bits(mask DIEPTXF0_HNPTXFSIZ) DIEPTXF0_HNPTXFSIZ {
	return DIEPTXF0_HNPTXFSIZ(r.U32.Bits(uint32(mask)))
}
func (r *RDIEPTXF0_HNPTXFSIZ) StoreBits(mask, b DIEPTXF0_HNPTXFSIZ) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RDIEPTXF0_HNPTXFSIZ) SetBits(mask DIEPTXF0_HNPTXFSIZ)   { r.U32.SetBits(uint32(mask)) }
func (r *RDIEPTXF0_HNPTXFSIZ) ClearBits(mask DIEPTXF0_HNPTXFSIZ) { r.U32.ClearBits(uint32(mask)) }
func (r *RDIEPTXF0_HNPTXFSIZ) Load() DIEPTXF0_HNPTXFSIZ          { return DIEPTXF0_HNPTXFSIZ(r.U32.Load()) }
func (r *RDIEPTXF0_HNPTXFSIZ) Store(b DIEPTXF0_HNPTXFSIZ)        { r.U32.Store(uint32(b)) }

func (r *RDIEPTXF0_HNPTXFSIZ) AtomicStoreBits(mask, b DIEPTXF0_HNPTXFSIZ) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RDIEPTXF0_HNPTXFSIZ) AtomicSetBits(mask DIEPTXF0_HNPTXFSIZ) {
	r.U32.AtomicSetBits(uint32(mask))
}
func (r *RDIEPTXF0_HNPTXFSIZ) AtomicClearBits(mask DIEPTXF0_HNPTXFSIZ) {
	r.U32.AtomicClearBits(uint32(mask))
}

type RMDIEPTXF0_HNPTXFSIZ struct{ mmio.UM32 }

func (rm RMDIEPTXF0_HNPTXFSIZ) Load() DIEPTXF0_HNPTXFSIZ   { return DIEPTXF0_HNPTXFSIZ(rm.UM32.Load()) }
func (rm RMDIEPTXF0_HNPTXFSIZ) Store(b DIEPTXF0_HNPTXFSIZ) { rm.UM32.Store(uint32(b)) }

type HNPTXSTS uint32

func (b HNPTXSTS) Field(mask HNPTXSTS) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask HNPTXSTS) J(v int) HNPTXSTS {
	return HNPTXSTS(bits.MakeField32(v, uint32(mask)))
}

type RHNPTXSTS struct{ mmio.U32 }

func (r *RHNPTXSTS) Bits(mask HNPTXSTS) HNPTXSTS { return HNPTXSTS(r.U32.Bits(uint32(mask))) }
func (r *RHNPTXSTS) StoreBits(mask, b HNPTXSTS)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHNPTXSTS) SetBits(mask HNPTXSTS)       { r.U32.SetBits(uint32(mask)) }
func (r *RHNPTXSTS) ClearBits(mask HNPTXSTS)     { r.U32.ClearBits(uint32(mask)) }
func (r *RHNPTXSTS) Load() HNPTXSTS              { return HNPTXSTS(r.U32.Load()) }
func (r *RHNPTXSTS) Store(b HNPTXSTS)            { r.U32.Store(uint32(b)) }

func (r *RHNPTXSTS) AtomicStoreBits(mask, b HNPTXSTS) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RHNPTXSTS) AtomicSetBits(mask HNPTXSTS)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RHNPTXSTS) AtomicClearBits(mask HNPTXSTS)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMHNPTXSTS struct{ mmio.UM32 }

func (rm RMHNPTXSTS) Load() HNPTXSTS   { return HNPTXSTS(rm.UM32.Load()) }
func (rm RMHNPTXSTS) Store(b HNPTXSTS) { rm.UM32.Store(uint32(b)) }

type GCCFG uint32

func (b GCCFG) Field(mask GCCFG) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GCCFG) J(v int) GCCFG {
	return GCCFG(bits.MakeField32(v, uint32(mask)))
}

type RGCCFG struct{ mmio.U32 }

func (r *RGCCFG) Bits(mask GCCFG) GCCFG   { return GCCFG(r.U32.Bits(uint32(mask))) }
func (r *RGCCFG) StoreBits(mask, b GCCFG) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGCCFG) SetBits(mask GCCFG)      { r.U32.SetBits(uint32(mask)) }
func (r *RGCCFG) ClearBits(mask GCCFG)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGCCFG) Load() GCCFG             { return GCCFG(r.U32.Load()) }
func (r *RGCCFG) Store(b GCCFG)           { r.U32.Store(uint32(b)) }

func (r *RGCCFG) AtomicStoreBits(mask, b GCCFG) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGCCFG) AtomicSetBits(mask GCCFG)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGCCFG) AtomicClearBits(mask GCCFG)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGCCFG struct{ mmio.UM32 }

func (rm RMGCCFG) Load() GCCFG   { return GCCFG(rm.UM32.Load()) }
func (rm RMGCCFG) Store(b GCCFG) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) PWRDWN() RMGCCFG {
	return RMGCCFG{mmio.UM32{&p.GCCFG.U32, uint32(PWRDWN)}}
}

func (p *USB_OTG_Global_Periph) VBDEN() RMGCCFG {
	return RMGCCFG{mmio.UM32{&p.GCCFG.U32, uint32(VBDEN)}}
}

type CID uint32

func (b CID) Field(mask CID) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CID) J(v int) CID {
	return CID(bits.MakeField32(v, uint32(mask)))
}

type RCID struct{ mmio.U32 }

func (r *RCID) Bits(mask CID) CID     { return CID(r.U32.Bits(uint32(mask))) }
func (r *RCID) StoreBits(mask, b CID) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCID) SetBits(mask CID)      { r.U32.SetBits(uint32(mask)) }
func (r *RCID) ClearBits(mask CID)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCID) Load() CID             { return CID(r.U32.Load()) }
func (r *RCID) Store(b CID)           { r.U32.Store(uint32(b)) }

func (r *RCID) AtomicStoreBits(mask, b CID) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCID) AtomicSetBits(mask CID)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCID) AtomicClearBits(mask CID)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCID struct{ mmio.UM32 }

func (rm RMCID) Load() CID   { return CID(rm.UM32.Load()) }
func (rm RMCID) Store(b CID) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) PRODUCT_ID() RMCID {
	return RMCID{mmio.UM32{&p.CID.U32, uint32(PRODUCT_ID)}}
}

type GHWCFG3 uint32

func (b GHWCFG3) Field(mask GHWCFG3) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GHWCFG3) J(v int) GHWCFG3 {
	return GHWCFG3(bits.MakeField32(v, uint32(mask)))
}

type RGHWCFG3 struct{ mmio.U32 }

func (r *RGHWCFG3) Bits(mask GHWCFG3) GHWCFG3 { return GHWCFG3(r.U32.Bits(uint32(mask))) }
func (r *RGHWCFG3) StoreBits(mask, b GHWCFG3) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGHWCFG3) SetBits(mask GHWCFG3)      { r.U32.SetBits(uint32(mask)) }
func (r *RGHWCFG3) ClearBits(mask GHWCFG3)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGHWCFG3) Load() GHWCFG3             { return GHWCFG3(r.U32.Load()) }
func (r *RGHWCFG3) Store(b GHWCFG3)           { r.U32.Store(uint32(b)) }

func (r *RGHWCFG3) AtomicStoreBits(mask, b GHWCFG3) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGHWCFG3) AtomicSetBits(mask GHWCFG3)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGHWCFG3) AtomicClearBits(mask GHWCFG3)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGHWCFG3 struct{ mmio.UM32 }

func (rm RMGHWCFG3) Load() GHWCFG3   { return GHWCFG3(rm.UM32.Load()) }
func (rm RMGHWCFG3) Store(b GHWCFG3) { rm.UM32.Store(uint32(b)) }

type GLPMCFG uint32

func (b GLPMCFG) Field(mask GLPMCFG) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GLPMCFG) J(v int) GLPMCFG {
	return GLPMCFG(bits.MakeField32(v, uint32(mask)))
}

type RGLPMCFG struct{ mmio.U32 }

func (r *RGLPMCFG) Bits(mask GLPMCFG) GLPMCFG { return GLPMCFG(r.U32.Bits(uint32(mask))) }
func (r *RGLPMCFG) StoreBits(mask, b GLPMCFG) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGLPMCFG) SetBits(mask GLPMCFG)      { r.U32.SetBits(uint32(mask)) }
func (r *RGLPMCFG) ClearBits(mask GLPMCFG)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGLPMCFG) Load() GLPMCFG             { return GLPMCFG(r.U32.Load()) }
func (r *RGLPMCFG) Store(b GLPMCFG)           { r.U32.Store(uint32(b)) }

func (r *RGLPMCFG) AtomicStoreBits(mask, b GLPMCFG) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGLPMCFG) AtomicSetBits(mask GLPMCFG)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGLPMCFG) AtomicClearBits(mask GLPMCFG)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGLPMCFG struct{ mmio.UM32 }

func (rm RMGLPMCFG) Load() GLPMCFG   { return GLPMCFG(rm.UM32.Load()) }
func (rm RMGLPMCFG) Store(b GLPMCFG) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) LPMEN() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(LPMEN)}}
}

func (p *USB_OTG_Global_Periph) LPMACK() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(LPMACK)}}
}

func (p *USB_OTG_Global_Periph) BESL() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(BESL)}}
}

func (p *USB_OTG_Global_Periph) REMWAKE() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(REMWAKE)}}
}

func (p *USB_OTG_Global_Periph) L1SSEN() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(L1SSEN)}}
}

func (p *USB_OTG_Global_Periph) BESLTHRS() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(BESLTHRS)}}
}

func (p *USB_OTG_Global_Periph) L1DSEN() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(L1DSEN)}}
}

func (p *USB_OTG_Global_Periph) LPMRSP() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(LPMRSP)}}
}

func (p *USB_OTG_Global_Periph) SLPSTS() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(SLPSTS)}}
}

func (p *USB_OTG_Global_Periph) L1RSMOK() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(L1RSMOK)}}
}

func (p *USB_OTG_Global_Periph) LPMCHIDX() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(LPMCHIDX)}}
}

func (p *USB_OTG_Global_Periph) LPMRCNT() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(LPMRCNT)}}
}

func (p *USB_OTG_Global_Periph) SNDLPM() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(SNDLPM)}}
}

func (p *USB_OTG_Global_Periph) LPMRCNTSTS() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(LPMRCNTSTS)}}
}

func (p *USB_OTG_Global_Periph) ENBESL() RMGLPMCFG {
	return RMGLPMCFG{mmio.UM32{&p.GLPMCFG.U32, uint32(ENBESL)}}
}

type GDFIFOCFG uint32

func (b GDFIFOCFG) Field(mask GDFIFOCFG) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GDFIFOCFG) J(v int) GDFIFOCFG {
	return GDFIFOCFG(bits.MakeField32(v, uint32(mask)))
}

type RGDFIFOCFG struct{ mmio.U32 }

func (r *RGDFIFOCFG) Bits(mask GDFIFOCFG) GDFIFOCFG { return GDFIFOCFG(r.U32.Bits(uint32(mask))) }
func (r *RGDFIFOCFG) StoreBits(mask, b GDFIFOCFG)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGDFIFOCFG) SetBits(mask GDFIFOCFG)        { r.U32.SetBits(uint32(mask)) }
func (r *RGDFIFOCFG) ClearBits(mask GDFIFOCFG)      { r.U32.ClearBits(uint32(mask)) }
func (r *RGDFIFOCFG) Load() GDFIFOCFG               { return GDFIFOCFG(r.U32.Load()) }
func (r *RGDFIFOCFG) Store(b GDFIFOCFG)             { r.U32.Store(uint32(b)) }

func (r *RGDFIFOCFG) AtomicStoreBits(mask, b GDFIFOCFG) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RGDFIFOCFG) AtomicSetBits(mask GDFIFOCFG)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGDFIFOCFG) AtomicClearBits(mask GDFIFOCFG) { r.U32.AtomicClearBits(uint32(mask)) }

type RMGDFIFOCFG struct{ mmio.UM32 }

func (rm RMGDFIFOCFG) Load() GDFIFOCFG   { return GDFIFOCFG(rm.UM32.Load()) }
func (rm RMGDFIFOCFG) Store(b GDFIFOCFG) { rm.UM32.Store(uint32(b)) }

type HPTXFSIZ uint32

func (b HPTXFSIZ) Field(mask HPTXFSIZ) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask HPTXFSIZ) J(v int) HPTXFSIZ {
	return HPTXFSIZ(bits.MakeField32(v, uint32(mask)))
}

type RHPTXFSIZ struct{ mmio.U32 }

func (r *RHPTXFSIZ) Bits(mask HPTXFSIZ) HPTXFSIZ { return HPTXFSIZ(r.U32.Bits(uint32(mask))) }
func (r *RHPTXFSIZ) StoreBits(mask, b HPTXFSIZ)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHPTXFSIZ) SetBits(mask HPTXFSIZ)       { r.U32.SetBits(uint32(mask)) }
func (r *RHPTXFSIZ) ClearBits(mask HPTXFSIZ)     { r.U32.ClearBits(uint32(mask)) }
func (r *RHPTXFSIZ) Load() HPTXFSIZ              { return HPTXFSIZ(r.U32.Load()) }
func (r *RHPTXFSIZ) Store(b HPTXFSIZ)            { r.U32.Store(uint32(b)) }

func (r *RHPTXFSIZ) AtomicStoreBits(mask, b HPTXFSIZ) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RHPTXFSIZ) AtomicSetBits(mask HPTXFSIZ)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RHPTXFSIZ) AtomicClearBits(mask HPTXFSIZ)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMHPTXFSIZ struct{ mmio.UM32 }

func (rm RMHPTXFSIZ) Load() HPTXFSIZ   { return HPTXFSIZ(rm.UM32.Load()) }
func (rm RMHPTXFSIZ) Store(b HPTXFSIZ) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) PTXSA() RMHPTXFSIZ {
	return RMHPTXFSIZ{mmio.UM32{&p.HPTXFSIZ.U32, uint32(PTXSA)}}
}

func (p *USB_OTG_Global_Periph) PTXFD() RMHPTXFSIZ {
	return RMHPTXFSIZ{mmio.UM32{&p.HPTXFSIZ.U32, uint32(PTXFD)}}
}

type DIEPTXF uint32

func (b DIEPTXF) Field(mask DIEPTXF) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DIEPTXF) J(v int) DIEPTXF {
	return DIEPTXF(bits.MakeField32(v, uint32(mask)))
}

type RDIEPTXF struct{ mmio.U32 }

func (r *RDIEPTXF) Bits(mask DIEPTXF) DIEPTXF { return DIEPTXF(r.U32.Bits(uint32(mask))) }
func (r *RDIEPTXF) StoreBits(mask, b DIEPTXF) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDIEPTXF) SetBits(mask DIEPTXF)      { r.U32.SetBits(uint32(mask)) }
func (r *RDIEPTXF) ClearBits(mask DIEPTXF)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDIEPTXF) Load() DIEPTXF             { return DIEPTXF(r.U32.Load()) }
func (r *RDIEPTXF) Store(b DIEPTXF)           { r.U32.Store(uint32(b)) }

func (r *RDIEPTXF) AtomicStoreBits(mask, b DIEPTXF) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RDIEPTXF) AtomicSetBits(mask DIEPTXF)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RDIEPTXF) AtomicClearBits(mask DIEPTXF)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMDIEPTXF struct{ mmio.UM32 }

func (rm RMDIEPTXF) Load() DIEPTXF   { return DIEPTXF(rm.UM32.Load()) }
func (rm RMDIEPTXF) Store(b DIEPTXF) { rm.UM32.Store(uint32(b)) }

func (p *USB_OTG_Global_Periph) INEPTXSA(n int) RMDIEPTXF {
	return RMDIEPTXF{mmio.UM32{&p.DIEPTXF[n].U32, uint32(INEPTXSA)}}
}

func (p *USB_OTG_Global_Periph) INEPTXFD(n int) RMDIEPTXF {
	return RMDIEPTXF{mmio.UM32{&p.DIEPTXF[n].U32, uint32(INEPTXFD)}}
}
