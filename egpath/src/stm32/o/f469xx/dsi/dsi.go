// Peripheral: DSI_Periph  DSI Controller.
// Instances:
//  DSI  mmap.DSI_BASE
// Registers:
//  0x00  32  VR      Host Version Register.
//  0x04  32  CR      Host Control Register.
//  0x08  32  CCR     HOST Clock Control Register.
//  0x0C  32  LVCIDR  Host LTDC VCID Register.
//  0x10  32  LCOLCR  Host LTDC Color Coding Register.
//  0x14  32  LPCR    Host LTDC Polarity Configuration Register.
//  0x18  32  LPMCR   Host Low-Power Mode Configuration Register.
//  0x2C  32  PCR     Host Protocol Configuration Register.
//  0x30  32  GVCIDR  Host Generic VCID Register.
//  0x34  32  M_CR    Host Mode Configuration Register.
//  0x38  32  VMCR    Host Video Mode Configuration Register.
//  0x3C  32  VPCR    Host Video Packet Configuration Register.
//  0x40  32  VCCR    Host Video Chunks Configuration Register.
//  0x44  32  VNPCR   Host Video Null Packet Configuration Register.
//  0x48  32  VHSACR  Host Video HSA Configuration Register.
//  0x4C  32  VHBPCR  Host Video HBP Configuration Register.
//  0x50  32  VLCR    Host Video Line Configuration Register.
//  0x54  32  VVSACR  Host Video VSA Configuration Register.
//  0x58  32  VVBPCR  Host Video VBP Configuration Register.
//  0x5C  32  VVFPCR  Host Video VFP Configuration Register.
//  0x60  32  VVACR   Host Video VA Configuration Register.
//  0x64  32  LCCR    Host LTDC Command Configuration Register.
//  0x68  32  CMCR    Host Command Mode Configuration Register.
//  0x6C  32  GHCR    Host Generic Header Configuration Register.
//  0x70  32  GPDR    Host Generic Payload Data Register.
//  0x74  32  GPSR    Host Generic Packet Status Register.
//  0x78  32  TCCR[6] Host Timeout Counter Configuration Register.
//  0x90  32  TDCR    Host 3D Configuration Register.
//  0x94  32  CLCR    Host Clock Lane Configuration Register.
//  0x98  32  CLTCR   Host Clock Lane Timer Configuration Register.
//  0x9C  32  DLTCR   Host Data Lane Timer Configuration Register.
//  0xA0  32  PCTLR   Host PHY Control Register.
//  0xA4  32  PCONFR  Host PHY Configuration Register.
//  0xA8  32  PUCR    Host PHY ULPS Control Register.
//  0xAC  32  PTTCR   Host PHY TX Triggers Configuration Register.
//  0xB0  32  PSR     Host PHY Status Register.
//  0xBC  32  ISR[2]  Host Interrupt & Status Register.
//  0xC4  32  IER[2]  Host Interrupt Enable Register.
//  0xD8  32  FIR[2]  Host Force Interrupt Register.
//  0x100 32  VSCR    Host Video Shadow Control Register.
//  0x10C 32  LCVCIDR Host LTDC Current VCID Register.
//  0x110 32  LCCCR   Host LTDC Current Color Coding Register.
//  0x118 32  LPMCCR  Host Low-power Mode Current Configuration Register.
//  0x138 32  VMCCR   Host Video Mode Current Configuration Register.
//  0x13C 32  VPCCR   Host Video Packet Current Configuration Register.
//  0x140 32  VCCCR   Host Video Chuncks Current Configuration Register.
//  0x144 32  VNPCCR  Host Video Null Packet Current Configuration Register.
//  0x148 32  VHSACCR Host Video HSA Current Configuration Register.
//  0x14C 32  VHBPCCR Host Video HBP Current Configuration Register.
//  0x150 32  VLCCR   Host Video Line Current Configuration Register.
//  0x154 32  VVSACCR Host Video VSA Current Configuration Register.
//  0x158 32  VVBPCCR Host Video VBP Current Configuration Register.
//  0x15C 32  VVFPCCR Host Video VFP Current Configuration Register.
//  0x160 32  VVACCR  Host Video VA Current Configuration Register.
//  0x190 32  TDCCR   Host 3D Current Configuration Register.
//  0x400 32  WCFGR   Wrapper Configuration Register.
//  0x404 32  WCR     Wrapper Control Register.
//  0x408 32  WIER    Wrapper Interrupt Enable Register.
//  0x40C 32  WISR    Wrapper Interrupt and Status Register.
//  0x410 32  WIFCR   Wrapper Interrupt Flag Clear Register.
//  0x418 32  WPCR[5] Wrapper PHY Configuration Register.
//  0x430 32  WRPCR   Wrapper Regulator and PLL Control Register.
// Import:
//  stm32/o/f469xx/mmap
package dsi

// DO NOT EDIT THIS FILE. GENERATED BY stm32xgen.

const (
	CR_EN CR = 0x01 << 0 //+ DSI Host power up and reset.
)

const (
	CR_ENn = 0
)

const (
	TXECKDIV  CCR = 0xFF << 0 //+ TX Escape Clock Division.
	TXECKDIV0 CCR = 0x01 << 0
	TXECKDIV1 CCR = 0x02 << 0
	TXECKDIV2 CCR = 0x04 << 0
	TXECKDIV3 CCR = 0x08 << 0
	TXECKDIV4 CCR = 0x10 << 0
	TXECKDIV5 CCR = 0x20 << 0
	TXECKDIV6 CCR = 0x40 << 0
	TXECKDIV7 CCR = 0x80 << 0
	TOCKDIV   CCR = 0xFF << 8 //+ Timeout Clock Division.
	TOCKDIV0  CCR = 0x01 << 8
	TOCKDIV1  CCR = 0x02 << 8
	TOCKDIV2  CCR = 0x04 << 8
	TOCKDIV3  CCR = 0x08 << 8
	TOCKDIV4  CCR = 0x10 << 8
	TOCKDIV5  CCR = 0x20 << 8
	TOCKDIV6  CCR = 0x40 << 8
	TOCKDIV7  CCR = 0x80 << 8
)

const (
	TXECKDIVn = 0
	TOCKDIVn  = 8
)

const (
	LVCIDR_VCID  LVCIDR = 0x03 << 0 //+ Virtual Channel ID.
	LVCIDR_VCID0 LVCIDR = 0x01 << 0
	LVCIDR_VCID1 LVCIDR = 0x02 << 0
)

const (
	LVCIDR_VCIDn = 0
)

const (
	LCOLCR_COLC  LCOLCR = 0x0F << 0 //+ Color Coding.
	LCOLCR_COLC0 LCOLCR = 0x01 << 0
	LCOLCR_COLC1 LCOLCR = 0x01 << 5 //+
	LCOLCR_COLC2 LCOLCR = 0x01 << 6 //+
	LCOLCR_COLC3 LCOLCR = 0x01 << 7 //+
	LCOLCR_LPE   LCOLCR = 0x01 << 8 //+ Loosly Packet Enable.
)

const (
	LCOLCR_COLCn  = 0
	LCOLCR_COLC1n = 5
	LCOLCR_COLC2n = 6
	LCOLCR_COLC3n = 7
	LCOLCR_LPEn   = 8
)

const (
	DEP LPCR = 0x01 << 0 //+ Data Enable Polarity.
	VSP LPCR = 0x01 << 1 //+ VSYNC Polarity.
	HSP LPCR = 0x01 << 2 //+ HSYNC Polarity.
)

const (
	DEPn = 0
	VSPn = 1
	HSPn = 2
)

const (
	LPMCR_VLPSIZE  LPMCR = 0xFF << 0 //+ VACT Largest Packet Size.
	LPMCR_VLPSIZE0 LPMCR = 0x01 << 0
	LPMCR_VLPSIZE1 LPMCR = 0x02 << 0
	LPMCR_VLPSIZE2 LPMCR = 0x04 << 0
	LPMCR_VLPSIZE3 LPMCR = 0x08 << 0
	LPMCR_VLPSIZE4 LPMCR = 0x10 << 0
	LPMCR_VLPSIZE5 LPMCR = 0x20 << 0
	LPMCR_VLPSIZE6 LPMCR = 0x40 << 0
	LPMCR_VLPSIZE7 LPMCR = 0x80 << 0
	LPMCR_LPSIZE   LPMCR = 0xFF << 16 //+ Largest Packet Size.
	LPMCR_LPSIZE0  LPMCR = 0x01 << 16
	LPMCR_LPSIZE1  LPMCR = 0x02 << 16
	LPMCR_LPSIZE2  LPMCR = 0x04 << 16
	LPMCR_LPSIZE3  LPMCR = 0x08 << 16
	LPMCR_LPSIZE4  LPMCR = 0x10 << 16
	LPMCR_LPSIZE5  LPMCR = 0x20 << 16
	LPMCR_LPSIZE6  LPMCR = 0x40 << 16
	LPMCR_LPSIZE7  LPMCR = 0x80 << 16
)

const (
	LPMCR_VLPSIZEn = 0
	LPMCR_LPSIZEn  = 16
)

const (
	ETTXE  PCR = 0x01 << 0 //+ EoTp Transmission Enable.
	ETRXE  PCR = 0x01 << 1 //+ EoTp Reception Enable.
	BTAE   PCR = 0x01 << 2 //+ Bus Turn Around Enable.
	ECCRXE PCR = 0x01 << 3 //+ ECC Reception Enable.
	CRCRXE PCR = 0x01 << 4 //+ CRC Reception Enable.
)

const (
	ETTXEn  = 0
	ETRXEn  = 1
	BTAEn   = 2
	ECCRXEn = 3
	CRCRXEn = 4
)

const (
	GVCIDR_VCID  GVCIDR = 0x03 << 0 //+ Virtual Channel ID.
	GVCIDR_VCID0 GVCIDR = 0x01 << 0
	GVCIDR_VCID1 GVCIDR = 0x02 << 0
)

const (
	GVCIDR_VCIDn = 0
)

const (
	VMCR_VMT    VMCR = 0x03 << 0 //+ Video Mode Type.
	VMCR_VMT0   VMCR = 0x01 << 0
	VMCR_VMT1   VMCR = 0x02 << 0
	VMCR_LPVSAE VMCR = 0x01 << 8  //+ Low-Power Vertical Sync Active Enable.
	VMCR_LPVBPE VMCR = 0x01 << 9  //+ Low-power Vertical Back-Porch Enable.
	VMCR_LPVFPE VMCR = 0x01 << 10 //+ Low-power Vertical Front-porch Enable.
	VMCR_LPVAE  VMCR = 0x01 << 11 //+ Low-Power Vertical Active Enable.
	VMCR_LPHBPE VMCR = 0x01 << 12 //+ Low-Power Horizontal Back-Porch Enable.
	LPHFPE      VMCR = 0x01 << 13 //+ Low-Power Horizontal Front-Porch Enable.
	VMCR_FBTAAE VMCR = 0x01 << 14 //+ Frame Bus-Turn-Around Acknowledge Enable.
	VMCR_LPCE   VMCR = 0x01 << 15 //+ Low-Power Command Enable.
	PGE         VMCR = 0x01 << 16 //+ Pattern Generator Enable.
	PGM         VMCR = 0x01 << 20 //+ Pattern Generator Mode.
	PGO         VMCR = 0x01 << 24 //+ Pattern Generator Orientation.
)

const (
	VMCR_VMTn    = 0
	VMCR_LPVSAEn = 8
	VMCR_LPVBPEn = 9
	VMCR_LPVFPEn = 10
	VMCR_LPVAEn  = 11
	VMCR_LPHBPEn = 12
	LPHFPEn      = 13
	VMCR_FBTAAEn = 14
	VMCR_LPCEn   = 15
	PGEn         = 16
	PGMn         = 20
	PGOn         = 24
)

const (
	VPCR_VPSIZE   VPCR = 0x3FFF << 0 //+ Video Packet Size.
	VPCR_VPSIZE0  VPCR = 0x01 << 0
	VPCR_VPSIZE1  VPCR = 0x02 << 0
	VPCR_VPSIZE2  VPCR = 0x04 << 0
	VPCR_VPSIZE3  VPCR = 0x08 << 0
	VPCR_VPSIZE4  VPCR = 0x10 << 0
	VPCR_VPSIZE5  VPCR = 0x20 << 0
	VPCR_VPSIZE6  VPCR = 0x40 << 0
	VPCR_VPSIZE7  VPCR = 0x80 << 0
	VPCR_VPSIZE8  VPCR = 0x100 << 0
	VPCR_VPSIZE9  VPCR = 0x200 << 0
	VPCR_VPSIZE10 VPCR = 0x400 << 0
	VPCR_VPSIZE11 VPCR = 0x800 << 0
	VPCR_VPSIZE12 VPCR = 0x1000 << 0
	VPCR_VPSIZE13 VPCR = 0x2000 << 0
)

const (
	VPCR_VPSIZEn = 0
)

const (
	VCCR_NUMC   VCCR = 0x1FFF << 0 //+ Number of Chunks.
	VCCR_NUMC0  VCCR = 0x01 << 0
	VCCR_NUMC1  VCCR = 0x02 << 0
	VCCR_NUMC2  VCCR = 0x04 << 0
	VCCR_NUMC3  VCCR = 0x08 << 0
	VCCR_NUMC4  VCCR = 0x10 << 0
	VCCR_NUMC5  VCCR = 0x20 << 0
	VCCR_NUMC6  VCCR = 0x40 << 0
	VCCR_NUMC7  VCCR = 0x80 << 0
	VCCR_NUMC8  VCCR = 0x100 << 0
	VCCR_NUMC9  VCCR = 0x200 << 0
	VCCR_NUMC10 VCCR = 0x400 << 0
	VCCR_NUMC11 VCCR = 0x800 << 0
	VCCR_NUMC12 VCCR = 0x1000 << 0
)

const (
	VCCR_NUMCn = 0
)

const (
	VNPCR_NPSIZE   VNPCR = 0x1FFF << 0 //+ Null Packet Size.
	VNPCR_NPSIZE0  VNPCR = 0x01 << 0
	VNPCR_NPSIZE1  VNPCR = 0x02 << 0
	VNPCR_NPSIZE2  VNPCR = 0x04 << 0
	VNPCR_NPSIZE3  VNPCR = 0x08 << 0
	VNPCR_NPSIZE4  VNPCR = 0x10 << 0
	VNPCR_NPSIZE5  VNPCR = 0x20 << 0
	VNPCR_NPSIZE6  VNPCR = 0x40 << 0
	VNPCR_NPSIZE7  VNPCR = 0x80 << 0
	VNPCR_NPSIZE8  VNPCR = 0x100 << 0
	VNPCR_NPSIZE9  VNPCR = 0x200 << 0
	VNPCR_NPSIZE10 VNPCR = 0x400 << 0
	VNPCR_NPSIZE11 VNPCR = 0x800 << 0
	VNPCR_NPSIZE12 VNPCR = 0x1000 << 0
)

const (
	VNPCR_NPSIZEn = 0
)

const (
	VHSACR_HSA   VHSACR = 0xFFF << 0 //+ Horizontal Synchronism Active duration.
	VHSACR_HSA0  VHSACR = 0x01 << 0
	VHSACR_HSA1  VHSACR = 0x02 << 0
	VHSACR_HSA2  VHSACR = 0x04 << 0
	VHSACR_HSA3  VHSACR = 0x08 << 0
	VHSACR_HSA4  VHSACR = 0x10 << 0
	VHSACR_HSA5  VHSACR = 0x20 << 0
	VHSACR_HSA6  VHSACR = 0x40 << 0
	VHSACR_HSA7  VHSACR = 0x80 << 0
	VHSACR_HSA8  VHSACR = 0x100 << 0
	VHSACR_HSA9  VHSACR = 0x200 << 0
	VHSACR_HSA10 VHSACR = 0x400 << 0
	VHSACR_HSA11 VHSACR = 0x800 << 0
)

const (
	VHSACR_HSAn = 0
)

const (
	VHBPCR_HBP   VHBPCR = 0xFFF << 0 //+ Horizontal Back-Porch duration.
	VHBPCR_HBP0  VHBPCR = 0x01 << 0
	VHBPCR_HBP1  VHBPCR = 0x02 << 0
	VHBPCR_HBP2  VHBPCR = 0x04 << 0
	VHBPCR_HBP3  VHBPCR = 0x08 << 0
	VHBPCR_HBP4  VHBPCR = 0x10 << 0
	VHBPCR_HBP5  VHBPCR = 0x20 << 0
	VHBPCR_HBP6  VHBPCR = 0x40 << 0
	VHBPCR_HBP7  VHBPCR = 0x80 << 0
	VHBPCR_HBP8  VHBPCR = 0x100 << 0
	VHBPCR_HBP9  VHBPCR = 0x200 << 0
	VHBPCR_HBP10 VHBPCR = 0x400 << 0
	VHBPCR_HBP11 VHBPCR = 0x800 << 0
)

const (
	VHBPCR_HBPn = 0
)

const (
	VLCR_HLINE   VLCR = 0x7FFF << 0 //+ Horizontal Line duration.
	VLCR_HLINE0  VLCR = 0x01 << 0
	VLCR_HLINE1  VLCR = 0x02 << 0
	VLCR_HLINE2  VLCR = 0x04 << 0
	VLCR_HLINE3  VLCR = 0x08 << 0
	VLCR_HLINE4  VLCR = 0x10 << 0
	VLCR_HLINE5  VLCR = 0x20 << 0
	VLCR_HLINE6  VLCR = 0x40 << 0
	VLCR_HLINE7  VLCR = 0x80 << 0
	VLCR_HLINE8  VLCR = 0x100 << 0
	VLCR_HLINE9  VLCR = 0x200 << 0
	VLCR_HLINE10 VLCR = 0x400 << 0
	VLCR_HLINE11 VLCR = 0x800 << 0
	VLCR_HLINE12 VLCR = 0x1000 << 0
	VLCR_HLINE13 VLCR = 0x2000 << 0
	VLCR_HLINE14 VLCR = 0x4000 << 0
)

const (
	VLCR_HLINEn = 0
)

const (
	VVSACR_VSA  VVSACR = 0x3FF << 0 //+ Vertical Synchronism Active duration.
	VVSACR_VSA0 VVSACR = 0x01 << 0
	VVSACR_VSA1 VVSACR = 0x02 << 0
	VVSACR_VSA2 VVSACR = 0x04 << 0
	VVSACR_VSA3 VVSACR = 0x08 << 0
	VVSACR_VSA4 VVSACR = 0x10 << 0
	VVSACR_VSA5 VVSACR = 0x20 << 0
	VVSACR_VSA6 VVSACR = 0x40 << 0
	VVSACR_VSA7 VVSACR = 0x80 << 0
	VVSACR_VSA8 VVSACR = 0x100 << 0
	VVSACR_VSA9 VVSACR = 0x200 << 0
)

const (
	VVSACR_VSAn = 0
)

const (
	VVBPCR_VBP  VVBPCR = 0x3FF << 0 //+ Vertical Back-Porch duration.
	VVBPCR_VBP0 VVBPCR = 0x01 << 0
	VVBPCR_VBP1 VVBPCR = 0x02 << 0
	VVBPCR_VBP2 VVBPCR = 0x04 << 0
	VVBPCR_VBP3 VVBPCR = 0x08 << 0
	VVBPCR_VBP4 VVBPCR = 0x10 << 0
	VVBPCR_VBP5 VVBPCR = 0x20 << 0
	VVBPCR_VBP6 VVBPCR = 0x40 << 0
	VVBPCR_VBP7 VVBPCR = 0x80 << 0
	VVBPCR_VBP8 VVBPCR = 0x100 << 0
	VVBPCR_VBP9 VVBPCR = 0x200 << 0
)

const (
	VVBPCR_VBPn = 0
)

const (
	VVFPCR_VFP  VVFPCR = 0x3FF << 0 //+ Vertical Front-Porch duration.
	VVFPCR_VFP0 VVFPCR = 0x01 << 0
	VVFPCR_VFP1 VVFPCR = 0x02 << 0
	VVFPCR_VFP2 VVFPCR = 0x04 << 0
	VVFPCR_VFP3 VVFPCR = 0x08 << 0
	VVFPCR_VFP4 VVFPCR = 0x10 << 0
	VVFPCR_VFP5 VVFPCR = 0x20 << 0
	VVFPCR_VFP6 VVFPCR = 0x40 << 0
	VVFPCR_VFP7 VVFPCR = 0x80 << 0
	VVFPCR_VFP8 VVFPCR = 0x100 << 0
	VVFPCR_VFP9 VVFPCR = 0x200 << 0
)

const (
	VVFPCR_VFPn = 0
)

const (
	VVACR_VA   VVACR = 0x3FFF << 0 //+ Vertical Active duration.
	VVACR_VA0  VVACR = 0x01 << 0
	VVACR_VA1  VVACR = 0x02 << 0
	VVACR_VA2  VVACR = 0x04 << 0
	VVACR_VA3  VVACR = 0x08 << 0
	VVACR_VA4  VVACR = 0x10 << 0
	VVACR_VA5  VVACR = 0x20 << 0
	VVACR_VA6  VVACR = 0x40 << 0
	VVACR_VA7  VVACR = 0x80 << 0
	VVACR_VA8  VVACR = 0x100 << 0
	VVACR_VA9  VVACR = 0x200 << 0
	VVACR_VA10 VVACR = 0x400 << 0
	VVACR_VA11 VVACR = 0x800 << 0
	VVACR_VA12 VVACR = 0x1000 << 0
	VVACR_VA13 VVACR = 0x2000 << 0
)

const (
	VVACR_VAn = 0
)

const (
	CMDSIZE   LCCR = 0xFFFF << 0 //+ Command Size.
	CMDSIZE0  LCCR = 0x01 << 0
	CMDSIZE1  LCCR = 0x02 << 0
	CMDSIZE2  LCCR = 0x04 << 0
	CMDSIZE3  LCCR = 0x08 << 0
	CMDSIZE4  LCCR = 0x10 << 0
	CMDSIZE5  LCCR = 0x20 << 0
	CMDSIZE6  LCCR = 0x40 << 0
	CMDSIZE7  LCCR = 0x80 << 0
	CMDSIZE8  LCCR = 0x100 << 0
	CMDSIZE9  LCCR = 0x200 << 0
	CMDSIZE10 LCCR = 0x400 << 0
	CMDSIZE11 LCCR = 0x800 << 0
	CMDSIZE12 LCCR = 0x1000 << 0
	CMDSIZE13 LCCR = 0x2000 << 0
	CMDSIZE14 LCCR = 0x4000 << 0
	CMDSIZE15 LCCR = 0x8000 << 0
)

const (
	CMDSIZEn = 0
)

const (
	TEARE  CMCR = 0x01 << 0  //+ Tearing Effect Acknowledge Request Enable.
	ARE    CMCR = 0x01 << 1  //+ Acknowledge Request Enable.
	GSW0TX CMCR = 0x01 << 8  //+ Generic Short Write Zero parameters Transmission.
	GSW1TX CMCR = 0x01 << 9  //+ Generic Short Write One parameters Transmission.
	GSW2TX CMCR = 0x01 << 10 //+ Generic Short Write Two parameters Transmission.
	GSR0TX CMCR = 0x01 << 11 //+ Generic Short Read Zero parameters Transmission.
	GSR1TX CMCR = 0x01 << 12 //+ Generic Short Read One parameters Transmission.
	GSR2TX CMCR = 0x01 << 13 //+ Generic Short Read Two parameters Transmission.
	GLWTX  CMCR = 0x01 << 14 //+ Generic Long Write Transmission.
	DSW0TX CMCR = 0x01 << 16 //+ DCS Short Write Zero parameter Transmission.
	DSW1TX CMCR = 0x01 << 17 //+ DCS Short Read One parameter Transmission.
	DSR0TX CMCR = 0x01 << 18 //+ DCS Short Read Zero parameter Transmission.
	DLWTX  CMCR = 0x01 << 19 //+ DCS Long Write Transmission.
	MRDPS  CMCR = 0x01 << 24 //+ Maximum Read Packet Size.
)

const (
	TEAREn  = 0
	AREn    = 1
	GSW0TXn = 8
	GSW1TXn = 9
	GSW2TXn = 10
	GSR0TXn = 11
	GSR1TXn = 12
	GSR2TXn = 13
	GLWTXn  = 14
	DSW0TXn = 16
	DSW1TXn = 17
	DSR0TXn = 18
	DLWTXn  = 19
	MRDPSn  = 24
)

const (
	DT         GHCR = 0x3F << 0 //+ Type.
	DT0        GHCR = 0x01 << 0
	DT1        GHCR = 0x02 << 0
	DT2        GHCR = 0x04 << 0
	DT3        GHCR = 0x08 << 0
	DT4        GHCR = 0x10 << 0
	DT5        GHCR = 0x20 << 0
	GHCR_VCID  GHCR = 0x03 << 6 //+ Channel.
	GHCR_VCID0 GHCR = 0x01 << 6
	GHCR_VCID1 GHCR = 0x02 << 6
	WCLSB      GHCR = 0xFF << 8 //+ WordCount LSB.
	WCLSB0     GHCR = 0x01 << 8
	WCLSB1     GHCR = 0x02 << 8
	WCLSB2     GHCR = 0x04 << 8
	WCLSB3     GHCR = 0x08 << 8
	WCLSB4     GHCR = 0x10 << 8
	WCLSB5     GHCR = 0x20 << 8
	WCLSB6     GHCR = 0x40 << 8
	WCLSB7     GHCR = 0x80 << 8
	WCMSB      GHCR = 0xFF << 16 //+ WordCount MSB.
	WCMSB0     GHCR = 0x01 << 16
	WCMSB1     GHCR = 0x02 << 16
	WCMSB2     GHCR = 0x04 << 16
	WCMSB3     GHCR = 0x08 << 16
	WCMSB4     GHCR = 0x10 << 16
	WCMSB5     GHCR = 0x20 << 16
	WCMSB6     GHCR = 0x40 << 16
	WCMSB7     GHCR = 0x80 << 16
)

const (
	DTn        = 0
	GHCR_VCIDn = 6
	WCLSBn     = 8
	WCMSBn     = 16
)

const (
	DATA1 GPDR = 0xFF << 0  //+ Payload Byte 1.
	DATA2 GPDR = 0xFF << 8  //+ Payload Byte 2.
	DATA3 GPDR = 0xFF << 16 //+ Payload Byte 3.
	DATA4 GPDR = 0xFF << 24 //+ Payload Byte 4.
)

const (
	DATA1n = 0
	DATA2n = 8
	DATA3n = 16
	DATA4n = 24
)

const (
	CMDFE GPSR = 0x01 << 0 //+ Command FIFO Empty.
	CMDFF GPSR = 0x01 << 1 //+ Command FIFO Full.
	PWRFE GPSR = 0x01 << 2 //+ Payload Write FIFO Empty.
	PWRFF GPSR = 0x01 << 3 //+ Payload Write FIFO Full.
	PRDFE GPSR = 0x01 << 4 //+ Payload Read FIFO Empty.
	PRDFF GPSR = 0x01 << 5 //+ Payload Read FIFO Full.
	RCB   GPSR = 0x01 << 6 //+ Read Command Busy.
)

const (
	CMDFEn = 0
	CMDFFn = 1
	PWRFEn = 2
	PWRFFn = 3
	PRDFEn = 4
	PRDFFn = 5
	RCBn   = 6
)

const (
	HSRD_TOCNT   TCCR = 0xFFFF << 0 //+ High-Speed Read Timeout Counter.
	HSRD_TOCNT0  TCCR = 0x01 << 0
	HSRD_TOCNT1  TCCR = 0x02 << 0
	HSRD_TOCNT2  TCCR = 0x04 << 0
	HSRD_TOCNT3  TCCR = 0x08 << 0
	HSRD_TOCNT4  TCCR = 0x10 << 0
	HSRD_TOCNT5  TCCR = 0x20 << 0
	HSRD_TOCNT6  TCCR = 0x40 << 0
	HSRD_TOCNT7  TCCR = 0x80 << 0
	HSRD_TOCNT8  TCCR = 0x100 << 0
	HSRD_TOCNT9  TCCR = 0x200 << 0
	HSRD_TOCNT10 TCCR = 0x400 << 0
	HSRD_TOCNT11 TCCR = 0x800 << 0
	HSRD_TOCNT12 TCCR = 0x1000 << 0
	HSRD_TOCNT13 TCCR = 0x2000 << 0
	HSRD_TOCNT14 TCCR = 0x4000 << 0
	HSRD_TOCNT15 TCCR = 0x8000 << 0
)

const (
	HSRD_TOCNTn = 0
)

const (
	TDCR_V3DM  TDCR = 0x03 << 0 //+ 3D Mode.
	TDCR_V3DM0 TDCR = 0x01 << 0
	TDCR_V3DM1 TDCR = 0x02 << 0
	TDCR_V3DF  TDCR = 0x03 << 2 //+ 3D Format.
	TDCR_V3DF0 TDCR = 0x01 << 2
	TDCR_V3DF1 TDCR = 0x02 << 2
	TDCR_SVS   TDCR = 0x01 << 4  //+ Second VSYNC.
	TDCR_RF    TDCR = 0x01 << 5  //+ Right First.
	TDCR_S3DC  TDCR = 0x01 << 16 //+ Send 3D Control.
)

const (
	TDCR_V3DMn = 0
	TDCR_V3DFn = 2
	TDCR_SVSn  = 4
	TDCR_RFn   = 5
	TDCR_S3DCn = 16
)

const (
	DPCC CLCR = 0x01 << 0 //+ D-PHY Clock Control.
	ACR  CLCR = 0x01 << 1 //+ Automatic Clocklane Control.
)

const (
	DPCCn = 0
	ACRn  = 1
)

const (
	CLTCR_LP2HS_TIME  CLTCR = 0x3FF << 0 //+ Low-Power to High-Speed Time.
	CLTCR_LP2HS_TIME0 CLTCR = 0x01 << 0
	CLTCR_LP2HS_TIME1 CLTCR = 0x02 << 0
	CLTCR_LP2HS_TIME2 CLTCR = 0x04 << 0
	CLTCR_LP2HS_TIME3 CLTCR = 0x08 << 0
	CLTCR_LP2HS_TIME4 CLTCR = 0x10 << 0
	CLTCR_LP2HS_TIME5 CLTCR = 0x20 << 0
	CLTCR_LP2HS_TIME6 CLTCR = 0x40 << 0
	CLTCR_LP2HS_TIME7 CLTCR = 0x80 << 0
	LP2HS_TIME8       CLTCR = 0x100 << 0
	LP2HS_TIME9       CLTCR = 0x200 << 0
	CLTCR_HS2LP_TIME  CLTCR = 0x3FF << 16 //+ High-Speed to Low-Power Time.
	CLTCR_HS2LP_TIME0 CLTCR = 0x01 << 16
	CLTCR_HS2LP_TIME1 CLTCR = 0x02 << 16
	CLTCR_HS2LP_TIME2 CLTCR = 0x04 << 16
	CLTCR_HS2LP_TIME3 CLTCR = 0x08 << 16
	CLTCR_HS2LP_TIME4 CLTCR = 0x10 << 16
	CLTCR_HS2LP_TIME5 CLTCR = 0x20 << 16
	CLTCR_HS2LP_TIME6 CLTCR = 0x40 << 16
	CLTCR_HS2LP_TIME7 CLTCR = 0x80 << 16
	HS2LP_TIME8       CLTCR = 0x100 << 16
	HS2LP_TIME9       CLTCR = 0x200 << 16
)

const (
	CLTCR_LP2HS_TIMEn = 0
	CLTCR_HS2LP_TIMEn = 16
)

const (
	MRD_TIME          DLTCR = 0x7FFF << 0 //+ Maximum Read Time.
	MRD_TIME0         DLTCR = 0x01 << 0
	MRD_TIME1         DLTCR = 0x02 << 0
	MRD_TIME2         DLTCR = 0x04 << 0
	MRD_TIME3         DLTCR = 0x08 << 0
	MRD_TIME4         DLTCR = 0x10 << 0
	MRD_TIME5         DLTCR = 0x20 << 0
	MRD_TIME6         DLTCR = 0x40 << 0
	MRD_TIME7         DLTCR = 0x80 << 0
	MRD_TIME8         DLTCR = 0x100 << 0
	MRD_TIME9         DLTCR = 0x200 << 0
	MRD_TIME10        DLTCR = 0x400 << 0
	MRD_TIME11        DLTCR = 0x800 << 0
	MRD_TIME12        DLTCR = 0x1000 << 0
	MRD_TIME13        DLTCR = 0x2000 << 0
	MRD_TIME14        DLTCR = 0x4000 << 0
	DLTCR_LP2HS_TIME  DLTCR = 0xFF << 16 //+ Low-Power To High-Speed Time.
	DLTCR_LP2HS_TIME0 DLTCR = 0x01 << 16
	DLTCR_LP2HS_TIME1 DLTCR = 0x02 << 16
	DLTCR_LP2HS_TIME2 DLTCR = 0x04 << 16
	DLTCR_LP2HS_TIME3 DLTCR = 0x08 << 16
	DLTCR_LP2HS_TIME4 DLTCR = 0x10 << 16
	DLTCR_LP2HS_TIME5 DLTCR = 0x20 << 16
	DLTCR_LP2HS_TIME6 DLTCR = 0x40 << 16
	DLTCR_LP2HS_TIME7 DLTCR = 0x80 << 16
	DLTCR_HS2LP_TIME  DLTCR = 0xFF << 24 //+ High-Speed To Low-Power Time.
	DLTCR_HS2LP_TIME0 DLTCR = 0x01 << 24
	DLTCR_HS2LP_TIME1 DLTCR = 0x02 << 24
	DLTCR_HS2LP_TIME2 DLTCR = 0x04 << 24
	DLTCR_HS2LP_TIME3 DLTCR = 0x08 << 24
	DLTCR_HS2LP_TIME4 DLTCR = 0x10 << 24
	DLTCR_HS2LP_TIME5 DLTCR = 0x20 << 24
	DLTCR_HS2LP_TIME6 DLTCR = 0x40 << 24
	DLTCR_HS2LP_TIME7 DLTCR = 0x80 << 24
)

const (
	MRD_TIMEn         = 0
	DLTCR_LP2HS_TIMEn = 16
	DLTCR_HS2LP_TIMEn = 24
)

const (
	DEN PCTLR = 0x01 << 1 //+ Digital Enable.
	CKE PCTLR = 0x01 << 2 //+ Clock Enable.
)

const (
	DENn = 1
	CKEn = 2
)

const (
	NL       PCONFR = 0x03 << 0 //+ Number of Lanes.
	NL0      PCONFR = 0x01 << 0
	NL1      PCONFR = 0x02 << 0
	SW_TIME  PCONFR = 0xFF << 8 //+ Stop Wait Time.
	SW_TIME0 PCONFR = 0x01 << 8
	SW_TIME1 PCONFR = 0x02 << 8
	SW_TIME2 PCONFR = 0x04 << 8
	SW_TIME3 PCONFR = 0x08 << 8
	SW_TIME4 PCONFR = 0x10 << 8
	SW_TIME5 PCONFR = 0x20 << 8
	SW_TIME6 PCONFR = 0x40 << 8
	SW_TIME7 PCONFR = 0x80 << 8
)

const (
	NLn      = 0
	SW_TIMEn = 8
)

const (
	URCL PUCR = 0x01 << 0 //+ ULPS Request on Clock Lane.
	UECL PUCR = 0x01 << 1 //+ ULPS Exit on Clock Lane.
	URDL PUCR = 0x01 << 2 //+ ULPS Request on Data Lane.
	UEDL PUCR = 0x01 << 3 //+ ULPS Exit on Data Lane.
)

const (
	URCLn = 0
	UECLn = 1
	URDLn = 2
	UEDLn = 3
)

const (
	TX_TRIG  PTTCR = 0x0F << 0 //+ Transmission Trigger.
	TX_TRIG0 PTTCR = 0x01 << 0
	TX_TRIG1 PTTCR = 0x02 << 0
	TX_TRIG2 PTTCR = 0x04 << 0
	TX_TRIG3 PTTCR = 0x08 << 0
)

const (
	TX_TRIGn = 0
)

const (
	PD   PSR = 0x01 << 1 //+ PHY Direction.
	PSSC PSR = 0x01 << 2 //+ PHY Stop State Clock lane.
	UANC PSR = 0x01 << 3 //+ ULPS Active Not Clock lane.
	PSS0 PSR = 0x01 << 4 //+ PHY Stop State lane 0.
	UAN0 PSR = 0x01 << 5 //+ ULPS Active Not lane 0.
	RUE0 PSR = 0x01 << 6 //+ RX ULPS Escape lane 0.
	PSS1 PSR = 0x01 << 7 //+ PHY Stop State lane 1.
	UAN1 PSR = 0x01 << 8 //+ ULPS Active Not lane 1.
)

const (
	PDn   = 1
	PSSCn = 2
	UANCn = 3
	PSS0n = 4
	UAN0n = 5
	RUE0n = 6
	PSS1n = 7
	UAN1n = 8
)

const (
	TOHSTX ISR = 0x01 << 0  //+ Timeout High-Speed Transmission.
	TOLPRX ISR = 0x01 << 1  //+ Timeout Low-Power Reception.
	ECCSE  ISR = 0x01 << 2  //+ ECC Single-bit Error.
	ECCME  ISR = 0x01 << 3  //+ ECC Multi-bit Error.
	CRCE   ISR = 0x01 << 4  //+ CRC Error.
	PSE    ISR = 0x01 << 5  //+ Packet Size Error.
	EOTPE  ISR = 0x01 << 6  //+ EoTp Error.
	LPWRE  ISR = 0x01 << 7  //+ LTDC Payload Write Error.
	GCWRE  ISR = 0x01 << 8  //+ Generic Command Write Error.
	GPWRE  ISR = 0x01 << 9  //+ Generic Payload Write Error.
	GPTXE  ISR = 0x01 << 10 //+ Generic Payload Transmit Error.
	GPRDE  ISR = 0x01 << 11 //+ Generic Payload Read Error.
	GPRXE  ISR = 0x01 << 12 //+ Generic Payload Receive Error.
)

const (
	TOHSTXn = 0
	TOLPRXn = 1
	ECCSEn  = 2
	ECCMEn  = 3
	CRCEn   = 4
	PSEn    = 5
	EOTPEn  = 6
	LPWREn  = 7
	GCWREn  = 8
	GPWREn  = 9
	GPTXEn  = 10
	GPRDEn  = 11
	GPRXEn  = 12
)

const (
	TOHSTXIE IER = 0x01 << 0  //+ Timeout High-Speed Transmission Interrupt Enable.
	TOLPRXIE IER = 0x01 << 1  //+ Timeout Low-Power Reception Interrupt Enable.
	ECCSEIE  IER = 0x01 << 2  //+ ECC Single-bit Error Interrupt Enable.
	ECCMEIE  IER = 0x01 << 3  //+ ECC Multi-bit Error Interrupt Enable.
	CRCEIE   IER = 0x01 << 4  //+ CRC Error Interrupt Enable.
	PSEIE    IER = 0x01 << 5  //+ Packet Size Error Interrupt Enable.
	EOTPEIE  IER = 0x01 << 6  //+ EoTp Error Interrupt Enable.
	LPWREIE  IER = 0x01 << 7  //+ LTDC Payload Write Error Interrupt Enable.
	GCWREIE  IER = 0x01 << 8  //+ Generic Command Write Error Interrupt Enable.
	GPWREIE  IER = 0x01 << 9  //+ Generic Payload Write Error Interrupt Enable.
	GPTXEIE  IER = 0x01 << 10 //+ Generic Payload Transmit Error Interrupt Enable.
	GPRDEIE  IER = 0x01 << 11 //+ Generic Payload Read Error Interrupt Enable.
	GPRXEIE  IER = 0x01 << 12 //+ Generic Payload Receive Error Interrupt Enable.
)

const (
	TOHSTXIEn = 0
	TOLPRXIEn = 1
	ECCSEIEn  = 2
	ECCMEIEn  = 3
	CRCEIEn   = 4
	PSEIEn    = 5
	EOTPEIEn  = 6
	LPWREIEn  = 7
	GCWREIEn  = 8
	GPWREIEn  = 9
	GPTXEIEn  = 10
	GPRDEIEn  = 11
	GPRXEIEn  = 12
)

const (
	FTOHSTX FIR = 0x01 << 0  //+ Force Timeout High-Speed Transmission.
	FTOLPRX FIR = 0x01 << 1  //+ Force Timeout Low-Power Reception.
	FECCSE  FIR = 0x01 << 2  //+ Force ECC Single-bit Error.
	FECCME  FIR = 0x01 << 3  //+ Force ECC Multi-bit Error.
	FCRCE   FIR = 0x01 << 4  //+ Force CRC Error.
	FPSE    FIR = 0x01 << 5  //+ Force Packet Size Error.
	FEOTPE  FIR = 0x01 << 6  //+ Force EoTp Error.
	FLPWRE  FIR = 0x01 << 7  //+ Force LTDC Payload Write Error.
	FGCWRE  FIR = 0x01 << 8  //+ Force Generic Command Write Error.
	FGPWRE  FIR = 0x01 << 9  //+ Force Generic Payload Write Error.
	FGPTXE  FIR = 0x01 << 10 //+ Force Generic Payload Transmit Error.
	FGPRDE  FIR = 0x01 << 11 //+ Force Generic Payload Read Error.
	FGPRXE  FIR = 0x01 << 12 //+ Force Generic Payload Receive Error.
)

const (
	FTOHSTXn = 0
	FTOLPRXn = 1
	FECCSEn  = 2
	FECCMEn  = 3
	FCRCEn   = 4
	FPSEn    = 5
	FEOTPEn  = 6
	FLPWREn  = 7
	FGCWREn  = 8
	FGPWREn  = 9
	FGPTXEn  = 10
	FGPRDEn  = 11
	FGPRXEn  = 12
)

const (
	VSCR_EN VSCR = 0x01 << 0 //+ Enable.
	UR      VSCR = 0x01 << 8 //+ Update Register.
)

const (
	VSCR_ENn = 0
	URn      = 8
)

const (
	LCVCIDR_VCID  LCVCIDR = 0x03 << 0 //+ Virtual Channel ID.
	LCVCIDR_VCID0 LCVCIDR = 0x01 << 0
	LCVCIDR_VCID1 LCVCIDR = 0x02 << 0
)

const (
	LCVCIDR_VCIDn = 0
)

const (
	LCCCR_COLC  LCCCR = 0x0F << 0 //+ Color Coding.
	LCCCR_COLC0 LCCCR = 0x01 << 0
	LCCCR_COLC1 LCCCR = 0x02 << 0
	LCCCR_COLC2 LCCCR = 0x04 << 0
	LCCCR_COLC3 LCCCR = 0x08 << 0
	LCCCR_LPE   LCCCR = 0x01 << 8 //+ Loosely Packed Enable.
)

const (
	LCCCR_COLCn = 0
	LCCCR_LPEn  = 8
)

const (
	LPMCCR_VLPSIZE  LPMCCR = 0xFF << 0 //+ VACT Largest Packet Size.
	LPMCCR_VLPSIZE0 LPMCCR = 0x01 << 0
	LPMCCR_VLPSIZE1 LPMCCR = 0x02 << 0
	LPMCCR_VLPSIZE2 LPMCCR = 0x04 << 0
	LPMCCR_VLPSIZE3 LPMCCR = 0x08 << 0
	LPMCCR_VLPSIZE4 LPMCCR = 0x10 << 0
	LPMCCR_VLPSIZE5 LPMCCR = 0x20 << 0
	LPMCCR_VLPSIZE6 LPMCCR = 0x40 << 0
	LPMCCR_VLPSIZE7 LPMCCR = 0x80 << 0
	LPMCCR_LPSIZE   LPMCCR = 0xFF << 16 //+ Largest Packet Size.
	LPMCCR_LPSIZE0  LPMCCR = 0x01 << 16
	LPMCCR_LPSIZE1  LPMCCR = 0x02 << 16
	LPMCCR_LPSIZE2  LPMCCR = 0x04 << 16
	LPMCCR_LPSIZE3  LPMCCR = 0x08 << 16
	LPMCCR_LPSIZE4  LPMCCR = 0x10 << 16
	LPMCCR_LPSIZE5  LPMCCR = 0x20 << 16
	LPMCCR_LPSIZE6  LPMCCR = 0x40 << 16
	LPMCCR_LPSIZE7  LPMCCR = 0x80 << 16
)

const (
	LPMCCR_VLPSIZEn = 0
	LPMCCR_LPSIZEn  = 16
)

const (
	VMCCR_VMT    VMCCR = 0x03 << 0 //+ Video Mode Type.
	VMCCR_VMT0   VMCCR = 0x01 << 0
	VMCCR_VMT1   VMCCR = 0x02 << 0
	VMCCR_LPVSAE VMCCR = 0x01 << 8  //+ Low-power Vertical Sync time Enable.
	VMCCR_LPVBPE VMCCR = 0x01 << 9  //+ Low-power Vertical Back-porch Enable.
	VMCCR_LPVFPE VMCCR = 0x01 << 10 //+ Low-power Vertical Front-porch Enable.
	VMCCR_LPVAE  VMCCR = 0x01 << 11 //+ Low-power Vertical Active Enable.
	VMCCR_LPHBPE VMCCR = 0x01 << 12 //+ Low-power Horizontal Back-porch Enable.
	LPHFE        VMCCR = 0x01 << 13 //+ Low-power Horizontal Front-porch Enable.
	VMCCR_FBTAAE VMCCR = 0x01 << 14 //+ Frame BTA Acknowledge Enable.
	VMCCR_LPCE   VMCCR = 0x01 << 15 //+ Low-power Command Enable.
)

const (
	VMCCR_VMTn    = 0
	VMCCR_LPVSAEn = 8
	VMCCR_LPVBPEn = 9
	VMCCR_LPVFPEn = 10
	VMCCR_LPVAEn  = 11
	VMCCR_LPHBPEn = 12
	LPHFEn        = 13
	VMCCR_FBTAAEn = 14
	VMCCR_LPCEn   = 15
)

const (
	VPCCR_VPSIZE   VPCCR = 0x3FFF << 0 //+ Video Packet Size.
	VPCCR_VPSIZE0  VPCCR = 0x01 << 0
	VPCCR_VPSIZE1  VPCCR = 0x02 << 0
	VPCCR_VPSIZE2  VPCCR = 0x04 << 0
	VPCCR_VPSIZE3  VPCCR = 0x08 << 0
	VPCCR_VPSIZE4  VPCCR = 0x10 << 0
	VPCCR_VPSIZE5  VPCCR = 0x20 << 0
	VPCCR_VPSIZE6  VPCCR = 0x40 << 0
	VPCCR_VPSIZE7  VPCCR = 0x80 << 0
	VPCCR_VPSIZE8  VPCCR = 0x100 << 0
	VPCCR_VPSIZE9  VPCCR = 0x200 << 0
	VPCCR_VPSIZE10 VPCCR = 0x400 << 0
	VPCCR_VPSIZE11 VPCCR = 0x800 << 0
	VPCCR_VPSIZE12 VPCCR = 0x1000 << 0
	VPCCR_VPSIZE13 VPCCR = 0x2000 << 0
)

const (
	VPCCR_VPSIZEn = 0
)

const (
	VCCCR_NUMC   VCCCR = 0x1FFF << 0 //+ Number of Chunks.
	VCCCR_NUMC0  VCCCR = 0x01 << 0
	VCCCR_NUMC1  VCCCR = 0x02 << 0
	VCCCR_NUMC2  VCCCR = 0x04 << 0
	VCCCR_NUMC3  VCCCR = 0x08 << 0
	VCCCR_NUMC4  VCCCR = 0x10 << 0
	VCCCR_NUMC5  VCCCR = 0x20 << 0
	VCCCR_NUMC6  VCCCR = 0x40 << 0
	VCCCR_NUMC7  VCCCR = 0x80 << 0
	VCCCR_NUMC8  VCCCR = 0x100 << 0
	VCCCR_NUMC9  VCCCR = 0x200 << 0
	VCCCR_NUMC10 VCCCR = 0x400 << 0
	VCCCR_NUMC11 VCCCR = 0x800 << 0
	VCCCR_NUMC12 VCCCR = 0x1000 << 0
)

const (
	VCCCR_NUMCn = 0
)

const (
	VNPCCR_NPSIZE   VNPCCR = 0x1FFF << 0 //+ Number of Chunks.
	VNPCCR_NPSIZE0  VNPCCR = 0x01 << 0
	VNPCCR_NPSIZE1  VNPCCR = 0x02 << 0
	VNPCCR_NPSIZE2  VNPCCR = 0x04 << 0
	VNPCCR_NPSIZE3  VNPCCR = 0x08 << 0
	VNPCCR_NPSIZE4  VNPCCR = 0x10 << 0
	VNPCCR_NPSIZE5  VNPCCR = 0x20 << 0
	VNPCCR_NPSIZE6  VNPCCR = 0x40 << 0
	VNPCCR_NPSIZE7  VNPCCR = 0x80 << 0
	VNPCCR_NPSIZE8  VNPCCR = 0x100 << 0
	VNPCCR_NPSIZE9  VNPCCR = 0x200 << 0
	VNPCCR_NPSIZE10 VNPCCR = 0x400 << 0
	VNPCCR_NPSIZE11 VNPCCR = 0x800 << 0
	VNPCCR_NPSIZE12 VNPCCR = 0x1000 << 0
)

const (
	VNPCCR_NPSIZEn = 0
)

const (
	VHSACCR_HSA   VHSACCR = 0xFFF << 0 //+ Horizontal Synchronism Active duration.
	VHSACCR_HSA0  VHSACCR = 0x01 << 0
	VHSACCR_HSA1  VHSACCR = 0x02 << 0
	VHSACCR_HSA2  VHSACCR = 0x04 << 0
	VHSACCR_HSA3  VHSACCR = 0x08 << 0
	VHSACCR_HSA4  VHSACCR = 0x10 << 0
	VHSACCR_HSA5  VHSACCR = 0x20 << 0
	VHSACCR_HSA6  VHSACCR = 0x40 << 0
	VHSACCR_HSA7  VHSACCR = 0x80 << 0
	VHSACCR_HSA8  VHSACCR = 0x100 << 0
	VHSACCR_HSA9  VHSACCR = 0x200 << 0
	VHSACCR_HSA10 VHSACCR = 0x400 << 0
	VHSACCR_HSA11 VHSACCR = 0x800 << 0
)

const (
	VHSACCR_HSAn = 0
)

const (
	VHBPCCR_HBP   VHBPCCR = 0xFFF << 0 //+ Horizontal Back-Porch duration.
	VHBPCCR_HBP0  VHBPCCR = 0x01 << 0
	VHBPCCR_HBP1  VHBPCCR = 0x02 << 0
	VHBPCCR_HBP2  VHBPCCR = 0x04 << 0
	VHBPCCR_HBP3  VHBPCCR = 0x08 << 0
	VHBPCCR_HBP4  VHBPCCR = 0x10 << 0
	VHBPCCR_HBP5  VHBPCCR = 0x20 << 0
	VHBPCCR_HBP6  VHBPCCR = 0x40 << 0
	VHBPCCR_HBP7  VHBPCCR = 0x80 << 0
	VHBPCCR_HBP8  VHBPCCR = 0x100 << 0
	VHBPCCR_HBP9  VHBPCCR = 0x200 << 0
	VHBPCCR_HBP10 VHBPCCR = 0x400 << 0
	VHBPCCR_HBP11 VHBPCCR = 0x800 << 0
)

const (
	VHBPCCR_HBPn = 0
)

const (
	VLCCR_HLINE   VLCCR = 0x7FFF << 0 //+ Horizontal Line duration.
	VLCCR_HLINE0  VLCCR = 0x01 << 0
	VLCCR_HLINE1  VLCCR = 0x02 << 0
	VLCCR_HLINE2  VLCCR = 0x04 << 0
	VLCCR_HLINE3  VLCCR = 0x08 << 0
	VLCCR_HLINE4  VLCCR = 0x10 << 0
	VLCCR_HLINE5  VLCCR = 0x20 << 0
	VLCCR_HLINE6  VLCCR = 0x40 << 0
	VLCCR_HLINE7  VLCCR = 0x80 << 0
	VLCCR_HLINE8  VLCCR = 0x100 << 0
	VLCCR_HLINE9  VLCCR = 0x200 << 0
	VLCCR_HLINE10 VLCCR = 0x400 << 0
	VLCCR_HLINE11 VLCCR = 0x800 << 0
	VLCCR_HLINE12 VLCCR = 0x1000 << 0
	VLCCR_HLINE13 VLCCR = 0x2000 << 0
	VLCCR_HLINE14 VLCCR = 0x4000 << 0
)

const (
	VLCCR_HLINEn = 0
)

const (
	VVSACCR_VSA  VVSACCR = 0x3FF << 0 //+ Vertical Synchronism Active duration.
	VVSACCR_VSA0 VVSACCR = 0x01 << 0
	VVSACCR_VSA1 VVSACCR = 0x02 << 0
	VVSACCR_VSA2 VVSACCR = 0x04 << 0
	VVSACCR_VSA3 VVSACCR = 0x08 << 0
	VVSACCR_VSA4 VVSACCR = 0x10 << 0
	VVSACCR_VSA5 VVSACCR = 0x20 << 0
	VVSACCR_VSA6 VVSACCR = 0x40 << 0
	VVSACCR_VSA7 VVSACCR = 0x80 << 0
	VVSACCR_VSA8 VVSACCR = 0x100 << 0
	VVSACCR_VSA9 VVSACCR = 0x200 << 0
)

const (
	VVSACCR_VSAn = 0
)

const (
	VVBPCCR_VBP  VVBPCCR = 0x3FF << 0 //+ Vertical Back-Porch duration.
	VVBPCCR_VBP0 VVBPCCR = 0x01 << 0
	VVBPCCR_VBP1 VVBPCCR = 0x02 << 0
	VVBPCCR_VBP2 VVBPCCR = 0x04 << 0
	VVBPCCR_VBP3 VVBPCCR = 0x08 << 0
	VVBPCCR_VBP4 VVBPCCR = 0x10 << 0
	VVBPCCR_VBP5 VVBPCCR = 0x20 << 0
	VVBPCCR_VBP6 VVBPCCR = 0x40 << 0
	VVBPCCR_VBP7 VVBPCCR = 0x80 << 0
	VVBPCCR_VBP8 VVBPCCR = 0x100 << 0
	VVBPCCR_VBP9 VVBPCCR = 0x200 << 0
)

const (
	VVBPCCR_VBPn = 0
)

const (
	VVFPCCR_VFP  VVFPCCR = 0x3FF << 0 //+ Vertical Front-Porch duration.
	VVFPCCR_VFP0 VVFPCCR = 0x01 << 0
	VVFPCCR_VFP1 VVFPCCR = 0x02 << 0
	VVFPCCR_VFP2 VVFPCCR = 0x04 << 0
	VVFPCCR_VFP3 VVFPCCR = 0x08 << 0
	VVFPCCR_VFP4 VVFPCCR = 0x10 << 0
	VVFPCCR_VFP5 VVFPCCR = 0x20 << 0
	VVFPCCR_VFP6 VVFPCCR = 0x40 << 0
	VVFPCCR_VFP7 VVFPCCR = 0x80 << 0
	VVFPCCR_VFP8 VVFPCCR = 0x100 << 0
	VVFPCCR_VFP9 VVFPCCR = 0x200 << 0
)

const (
	VVFPCCR_VFPn = 0
)

const (
	VVACCR_VA   VVACCR = 0x3FFF << 0 //+ Vertical Active duration.
	VVACCR_VA0  VVACCR = 0x01 << 0
	VVACCR_VA1  VVACCR = 0x02 << 0
	VVACCR_VA2  VVACCR = 0x04 << 0
	VVACCR_VA3  VVACCR = 0x08 << 0
	VVACCR_VA4  VVACCR = 0x10 << 0
	VVACCR_VA5  VVACCR = 0x20 << 0
	VVACCR_VA6  VVACCR = 0x40 << 0
	VVACCR_VA7  VVACCR = 0x80 << 0
	VVACCR_VA8  VVACCR = 0x100 << 0
	VVACCR_VA9  VVACCR = 0x200 << 0
	VVACCR_VA10 VVACCR = 0x400 << 0
	VVACCR_VA11 VVACCR = 0x800 << 0
	VVACCR_VA12 VVACCR = 0x1000 << 0
	VVACCR_VA13 VVACCR = 0x2000 << 0
)

const (
	VVACCR_VAn = 0
)

const (
	TDCCR_V3DM  TDCCR = 0x03 << 0 //+ 3D Mode.
	TDCCR_V3DM0 TDCCR = 0x01 << 0
	TDCCR_V3DM1 TDCCR = 0x02 << 0
	TDCCR_V3DF  TDCCR = 0x03 << 2 //+ 3D Format.
	TDCCR_V3DF0 TDCCR = 0x01 << 2
	TDCCR_V3DF1 TDCCR = 0x02 << 2
	TDCCR_SVS   TDCCR = 0x01 << 4  //+ Second VSYNC.
	TDCCR_RF    TDCCR = 0x01 << 5  //+ Right First.
	TDCCR_S3DC  TDCCR = 0x01 << 16 //+ Send 3D Control.
)

const (
	TDCCR_V3DMn = 0
	TDCCR_V3DFn = 2
	TDCCR_SVSn  = 4
	TDCCR_RFn   = 5
	TDCCR_S3DCn = 16
)

const (
	DSIM    WCFGR = 0x01 << 0 //+ DSI Mode.
	COLMUX  WCFGR = 0x07 << 1 //+ Color Multiplexing.
	COLMUX0 WCFGR = 0x01 << 1
	COLMUX1 WCFGR = 0x02 << 1
	COLMUX2 WCFGR = 0x04 << 1
	TESRC   WCFGR = 0x01 << 4 //+ Tearing Effect Source.
	TEPOL   WCFGR = 0x01 << 5 //+ Tearing Effect Polarity.
	AR      WCFGR = 0x01 << 6 //+ Automatic Refresh.
	VSPOL   WCFGR = 0x01 << 7 //+ VSync Polarity.
)

const (
	DSIMn   = 0
	COLMUXn = 1
	TESRCn  = 4
	TEPOLn  = 5
	ARn     = 6
	VSPOLn  = 7
)

const (
	COLM   WCR = 0x01 << 0 //+ Color Mode.
	SHTDN  WCR = 0x01 << 1 //+ Shutdown.
	LTDCEN WCR = 0x01 << 2 //+ LTDC Enable.
	DSIEN  WCR = 0x01 << 3 //+ DSI Enable.
)

const (
	COLMn   = 0
	SHTDNn  = 1
	LTDCENn = 2
	DSIENn  = 3
)

const (
	TEIE   WIER = 0x01 << 0  //+ Tearing Effect Interrupt Enable.
	ERIE   WIER = 0x01 << 1  //+ End of Refresh Interrupt Enable.
	PLLLIE WIER = 0x01 << 9  //+ PLL Lock Interrupt Enable.
	PLLUIE WIER = 0x01 << 10 //+ PLL Unlock Interrupt Enable.
	RRIE   WIER = 0x01 << 13 //+ Regulator Ready Interrupt Enable.
)

const (
	TEIEn   = 0
	ERIEn   = 1
	PLLLIEn = 9
	PLLUIEn = 10
	RRIEn   = 13
)

const (
	TEIF   WISR = 0x01 << 0  //+ Tearing Effect Interrupt Flag.
	ERIF   WISR = 0x01 << 1  //+ End of Refresh Interrupt Flag.
	BUSY   WISR = 0x01 << 2  //+ Busy Flag.
	PLLLS  WISR = 0x01 << 8  //+ PLL Lock Status.
	PLLLIF WISR = 0x01 << 9  //+ PLL Lock Interrupt Flag.
	PLLUIF WISR = 0x01 << 10 //+ PLL Unlock Interrupt Flag.
	RRS    WISR = 0x01 << 12 //+ Regulator Ready Flag.
	RRIF   WISR = 0x01 << 13 //+ Regulator Ready Interrupt Flag.
)

const (
	TEIFn   = 0
	ERIFn   = 1
	BUSYn   = 2
	PLLLSn  = 8
	PLLLIFn = 9
	PLLUIFn = 10
	RRSn    = 12
	RRIFn   = 13
)

const (
	CTEIF   WIFCR = 0x01 << 0  //+ Clear Tearing Effect Interrupt Flag.
	CERIF   WIFCR = 0x01 << 1  //+ Clear End of Refresh Interrupt Flag.
	CPLLLIF WIFCR = 0x01 << 9  //+ Clear PLL Lock Interrupt Flag.
	CPLLUIF WIFCR = 0x01 << 10 //+ Clear PLL Unlock Interrupt Flag.
	CRRIF   WIFCR = 0x01 << 13 //+ Clear Regulator Ready Interrupt Flag.
)

const (
	CTEIFn   = 0
	CERIFn   = 1
	CPLLLIFn = 9
	CPLLUIFn = 10
	CRRIFn   = 13
)

const (
	HSTXDCL    WPCR = 0x03 << 0 //+ High-Speed Transmission Delay on Clock Lane.
	HSTXDCL0   WPCR = 0x01 << 0
	HSTXDCL1   WPCR = 0x02 << 0
	HSTXDDL    WPCR = 0x03 << 2 //+ High-Speed Transmission Delay on Data Lane.
	HSTXDDL0   WPCR = 0x01 << 2
	HSTXDDL1   WPCR = 0x02 << 2
	LPSRCCL    WPCR = 0x03 << 6 //+ Low-Power transmission Slew Rate Compensation on Clock Lane.
	LPSRCCL0   WPCR = 0x01 << 6
	LPSRCCL1   WPCR = 0x02 << 6
	LPSRCDL    WPCR = 0x03 << 8 //+ Low-Power transmission Slew Rate Compensation on Data Lane.
	LPSRCDL0   WPCR = 0x01 << 8
	LPSRCDL1   WPCR = 0x02 << 8
	SDDC       WPCR = 0x01 << 12 //+ SDD Control.
	LPRXVCDL   WPCR = 0x03 << 14 //+ Low-Power Reception V-IL Compensation on Data Lanes.
	LPRXVCDL0  WPCR = 0x01 << 14
	LPRXVCDL1  WPCR = 0x02 << 14
	HSTXSRCCL  WPCR = 0x03 << 16 //+ High-Speed Transmission Delay on Clock Lane.
	HSTXSRCCL0 WPCR = 0x01 << 16
	HSTXSRCCL1 WPCR = 0x02 << 16
	HSTXSRCDL  WPCR = 0x03 << 18 //+ High-Speed Transmission Delay on Data Lane.
	HSTXSRCDL0 WPCR = 0x01 << 18
	HSTXSRCDL1 WPCR = 0x02 << 18
	FLPRXLPM   WPCR = 0x01 << 22 //+ Forces LP Receiver in Low-Power Mode.
	LPRXFT     WPCR = 0x03 << 25 //+ Low-Power RX low-pass Filtering Tuning.
	LPRXFT0    WPCR = 0x01 << 25
	LPRXFT1    WPCR = 0x02 << 25
)

const (
	HSTXDCLn   = 0
	HSTXDDLn   = 2
	LPSRCCLn   = 6
	LPSRCDLn   = 8
	SDDCn      = 12
	LPRXVCDLn  = 14
	HSTXSRCCLn = 16
	HSTXSRCDLn = 18
	FLPRXLPMn  = 22
	LPRXFTn    = 25
)

const (
	PLLEN     WRPCR = 0x01 << 0 //+ PLL Enable.
	PLL_NDIV  WRPCR = 0x7F << 2 //+ PLL Loop Division Factor.
	PLL_NDIV0 WRPCR = 0x01 << 2
	PLL_NDIV1 WRPCR = 0x02 << 2
	PLL_NDIV2 WRPCR = 0x04 << 2
	PLL_NDIV3 WRPCR = 0x08 << 2
	PLL_NDIV4 WRPCR = 0x10 << 2
	PLL_NDIV5 WRPCR = 0x20 << 2
	PLL_NDIV6 WRPCR = 0x40 << 2
	PLL_IDF   WRPCR = 0x0F << 11 //+ PLL Input Division Factor.
	PLL_IDF0  WRPCR = 0x01 << 11
	PLL_IDF1  WRPCR = 0x02 << 11
	PLL_IDF2  WRPCR = 0x04 << 11
	PLL_IDF3  WRPCR = 0x08 << 11
	PLL_ODF   WRPCR = 0x03 << 16 //+ PLL Output Division Factor.
	PLL_ODF0  WRPCR = 0x01 << 16
	PLL_ODF1  WRPCR = 0x02 << 16
	REGEN     WRPCR = 0x01 << 24 //+ Regulator Enable.
)

const (
	PLLENn    = 0
	PLL_NDIVn = 2
	PLL_IDFn  = 11
	PLL_ODFn  = 16
	REGENn    = 24
)
