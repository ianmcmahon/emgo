package dsi

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f469xx/mmap"
)

type DSI_Periph struct {
	VR      RVR
	CR      RCR
	CCR     RCCR
	LVCIDR  RLVCIDR
	LCOLCR  RLCOLCR
	LPCR    RLPCR
	LPMCR   RLPMCR
	_       [4]uint32
	PCR     RPCR
	GVCIDR  RGVCIDR
	MCR     RMCR
	VMCR    RVMCR
	VPCR    RVPCR
	VCCR    RVCCR
	VNPCR   RVNPCR
	VHSACR  RVHSACR
	VHBPCR  RVHBPCR
	VLCR    RVLCR
	VVSACR  RVVSACR
	VVBPCR  RVVBPCR
	VVFPCR  RVVFPCR
	VVACR   RVVACR
	LCCR    RLCCR
	CMCR    RCMCR
	GHCR    RGHCR
	GPDR    RGPDR
	GPSR    RGPSR
	TCCR    [6]RTCCR
	TDCR    RTDCR
	CLCR    RCLCR
	CLTCR   RCLTCR
	DLTCR   RDLTCR
	PCTLR   RPCTLR
	PCONFR  RPCONFR
	PUCR    RPUCR
	PTTCR   RPTTCR
	PSR     RPSR
	_       [2]uint32
	ISR     [2]RISR
	IER     [2]RIER
	_       [3]uint32
	FIR     [2]RFIR
	_       [8]uint32
	VSCR    RVSCR
	_       [2]uint32
	LCVCIDR RLCVCIDR
	LCCCR   RLCCCR
	_       uint32
	LPMCCR  RLPMCCR
	_       [7]uint32
	VMCCR   RVMCCR
	VPCCR   RVPCCR
	VCCCR   RVCCCR
	VNPCCR  RVNPCCR
	VHSACCR RVHSACCR
	VHBPCCR RVHBPCCR
	VLCCR   RVLCCR
	VVSACCR RVVSACCR
	VVBPCCR RVVBPCCR
	VVFPCCR RVVFPCCR
	VVACCR  RVVACCR
	_       [11]uint32
	TDCCR   RTDCCR
	_       [155]uint32
	WCFGR   RWCFGR
	WCR     RWCR
	WIER    RWIER
	WISR    RWISR
	WIFCR   RWIFCR
	_       uint32
	WPCR    [5]RWPCR
	_       uint32
	WRPCR   RWRPCR
}

func (p *DSI_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var DSI = (*DSI_Periph)(unsafe.Pointer(uintptr(mmap.DSI_BASE)))

type VR uint32

func (b VR) Field(mask VR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VR) J(v int) VR {
	return VR(bits.MakeField32(v, uint32(mask)))
}

type RVR struct{ mmio.U32 }

func (r *RVR) Bits(mask VR) VR      { return VR(r.U32.Bits(uint32(mask))) }
func (r *RVR) StoreBits(mask, b VR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVR) SetBits(mask VR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVR) ClearBits(mask VR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVR) Load() VR             { return VR(r.U32.Load()) }
func (r *RVR) Store(b VR)           { r.U32.Store(uint32(b)) }

func (r *RVR) AtomicStoreBits(mask, b VR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVR) AtomicSetBits(mask VR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVR) AtomicClearBits(mask VR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVR struct{ mmio.UM32 }

func (rm RMVR) Load() VR   { return VR(rm.UM32.Load()) }
func (rm RMVR) Store(b VR) { rm.UM32.Store(uint32(b)) }

type CR uint32

func (b CR) Field(mask CR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR) J(v int) CR {
	return CR(bits.MakeField32(v, uint32(mask)))
}

type RCR struct{ mmio.U32 }

func (r *RCR) Bits(mask CR) CR      { return CR(r.U32.Bits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

func (r *RCR) AtomicStoreBits(mask, b CR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR) AtomicSetBits(mask CR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR) AtomicClearBits(mask CR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) EN() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(EN)}}
}

type CCR uint32

func (b CCR) Field(mask CCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CCR) J(v int) CCR {
	return CCR(bits.MakeField32(v, uint32(mask)))
}

type RCCR struct{ mmio.U32 }

func (r *RCCR) Bits(mask CCR) CCR     { return CCR(r.U32.Bits(uint32(mask))) }
func (r *RCCR) StoreBits(mask, b CCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCR) SetBits(mask CCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCCR) ClearBits(mask CCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCCR) Load() CCR             { return CCR(r.U32.Load()) }
func (r *RCCR) Store(b CCR)           { r.U32.Store(uint32(b)) }

func (r *RCCR) AtomicStoreBits(mask, b CCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCCR) AtomicSetBits(mask CCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCCR) AtomicClearBits(mask CCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCCR struct{ mmio.UM32 }

func (rm RMCCR) Load() CCR   { return CCR(rm.UM32.Load()) }
func (rm RMCCR) Store(b CCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) TXECKDIV() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(TXECKDIV)}}
}

func (p *DSI_Periph) TOCKDIV() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(TOCKDIV)}}
}

type LVCIDR uint32

func (b LVCIDR) Field(mask LVCIDR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LVCIDR) J(v int) LVCIDR {
	return LVCIDR(bits.MakeField32(v, uint32(mask)))
}

type RLVCIDR struct{ mmio.U32 }

func (r *RLVCIDR) Bits(mask LVCIDR) LVCIDR  { return LVCIDR(r.U32.Bits(uint32(mask))) }
func (r *RLVCIDR) StoreBits(mask, b LVCIDR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLVCIDR) SetBits(mask LVCIDR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLVCIDR) ClearBits(mask LVCIDR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLVCIDR) Load() LVCIDR             { return LVCIDR(r.U32.Load()) }
func (r *RLVCIDR) Store(b LVCIDR)           { r.U32.Store(uint32(b)) }

func (r *RLVCIDR) AtomicStoreBits(mask, b LVCIDR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RLVCIDR) AtomicSetBits(mask LVCIDR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RLVCIDR) AtomicClearBits(mask LVCIDR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMLVCIDR struct{ mmio.UM32 }

func (rm RMLVCIDR) Load() LVCIDR   { return LVCIDR(rm.UM32.Load()) }
func (rm RMLVCIDR) Store(b LVCIDR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VCID() RMLVCIDR {
	return RMLVCIDR{mmio.UM32{&p.LVCIDR.U32, uint32(VCID)}}
}

type LCOLCR uint32

func (b LCOLCR) Field(mask LCOLCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LCOLCR) J(v int) LCOLCR {
	return LCOLCR(bits.MakeField32(v, uint32(mask)))
}

type RLCOLCR struct{ mmio.U32 }

func (r *RLCOLCR) Bits(mask LCOLCR) LCOLCR  { return LCOLCR(r.U32.Bits(uint32(mask))) }
func (r *RLCOLCR) StoreBits(mask, b LCOLCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLCOLCR) SetBits(mask LCOLCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLCOLCR) ClearBits(mask LCOLCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLCOLCR) Load() LCOLCR             { return LCOLCR(r.U32.Load()) }
func (r *RLCOLCR) Store(b LCOLCR)           { r.U32.Store(uint32(b)) }

func (r *RLCOLCR) AtomicStoreBits(mask, b LCOLCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RLCOLCR) AtomicSetBits(mask LCOLCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RLCOLCR) AtomicClearBits(mask LCOLCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMLCOLCR struct{ mmio.UM32 }

func (rm RMLCOLCR) Load() LCOLCR   { return LCOLCR(rm.UM32.Load()) }
func (rm RMLCOLCR) Store(b LCOLCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) COLC() RMLCOLCR {
	return RMLCOLCR{mmio.UM32{&p.LCOLCR.U32, uint32(COLC)}}
}

func (p *DSI_Periph) COLC1() RMLCOLCR {
	return RMLCOLCR{mmio.UM32{&p.LCOLCR.U32, uint32(COLC1)}}
}

func (p *DSI_Periph) COLC2() RMLCOLCR {
	return RMLCOLCR{mmio.UM32{&p.LCOLCR.U32, uint32(COLC2)}}
}

func (p *DSI_Periph) COLC3() RMLCOLCR {
	return RMLCOLCR{mmio.UM32{&p.LCOLCR.U32, uint32(COLC3)}}
}

func (p *DSI_Periph) LPE() RMLCOLCR {
	return RMLCOLCR{mmio.UM32{&p.LCOLCR.U32, uint32(LPE)}}
}

type LPCR uint32

func (b LPCR) Field(mask LPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LPCR) J(v int) LPCR {
	return LPCR(bits.MakeField32(v, uint32(mask)))
}

type RLPCR struct{ mmio.U32 }

func (r *RLPCR) Bits(mask LPCR) LPCR    { return LPCR(r.U32.Bits(uint32(mask))) }
func (r *RLPCR) StoreBits(mask, b LPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLPCR) SetBits(mask LPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLPCR) ClearBits(mask LPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLPCR) Load() LPCR             { return LPCR(r.U32.Load()) }
func (r *RLPCR) Store(b LPCR)           { r.U32.Store(uint32(b)) }

func (r *RLPCR) AtomicStoreBits(mask, b LPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RLPCR) AtomicSetBits(mask LPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RLPCR) AtomicClearBits(mask LPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMLPCR struct{ mmio.UM32 }

func (rm RMLPCR) Load() LPCR   { return LPCR(rm.UM32.Load()) }
func (rm RMLPCR) Store(b LPCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) DEP() RMLPCR {
	return RMLPCR{mmio.UM32{&p.LPCR.U32, uint32(DEP)}}
}

func (p *DSI_Periph) VSP() RMLPCR {
	return RMLPCR{mmio.UM32{&p.LPCR.U32, uint32(VSP)}}
}

func (p *DSI_Periph) HSP() RMLPCR {
	return RMLPCR{mmio.UM32{&p.LPCR.U32, uint32(HSP)}}
}

type LPMCR uint32

func (b LPMCR) Field(mask LPMCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LPMCR) J(v int) LPMCR {
	return LPMCR(bits.MakeField32(v, uint32(mask)))
}

type RLPMCR struct{ mmio.U32 }

func (r *RLPMCR) Bits(mask LPMCR) LPMCR   { return LPMCR(r.U32.Bits(uint32(mask))) }
func (r *RLPMCR) StoreBits(mask, b LPMCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLPMCR) SetBits(mask LPMCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLPMCR) ClearBits(mask LPMCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLPMCR) Load() LPMCR             { return LPMCR(r.U32.Load()) }
func (r *RLPMCR) Store(b LPMCR)           { r.U32.Store(uint32(b)) }

func (r *RLPMCR) AtomicStoreBits(mask, b LPMCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RLPMCR) AtomicSetBits(mask LPMCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RLPMCR) AtomicClearBits(mask LPMCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMLPMCR struct{ mmio.UM32 }

func (rm RMLPMCR) Load() LPMCR   { return LPMCR(rm.UM32.Load()) }
func (rm RMLPMCR) Store(b LPMCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VLPSIZE() RMLPMCR {
	return RMLPMCR{mmio.UM32{&p.LPMCR.U32, uint32(VLPSIZE)}}
}

func (p *DSI_Periph) LPSIZE() RMLPMCR {
	return RMLPMCR{mmio.UM32{&p.LPMCR.U32, uint32(LPSIZE)}}
}

type PCR uint32

func (b PCR) Field(mask PCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PCR) J(v int) PCR {
	return PCR(bits.MakeField32(v, uint32(mask)))
}

type RPCR struct{ mmio.U32 }

func (r *RPCR) Bits(mask PCR) PCR     { return PCR(r.U32.Bits(uint32(mask))) }
func (r *RPCR) StoreBits(mask, b PCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPCR) SetBits(mask PCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPCR) ClearBits(mask PCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPCR) Load() PCR             { return PCR(r.U32.Load()) }
func (r *RPCR) Store(b PCR)           { r.U32.Store(uint32(b)) }

func (r *RPCR) AtomicStoreBits(mask, b PCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPCR) AtomicSetBits(mask PCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPCR) AtomicClearBits(mask PCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPCR struct{ mmio.UM32 }

func (rm RMPCR) Load() PCR   { return PCR(rm.UM32.Load()) }
func (rm RMPCR) Store(b PCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) ETTXE() RMPCR {
	return RMPCR{mmio.UM32{&p.PCR.U32, uint32(ETTXE)}}
}

func (p *DSI_Periph) ETRXE() RMPCR {
	return RMPCR{mmio.UM32{&p.PCR.U32, uint32(ETRXE)}}
}

func (p *DSI_Periph) BTAE() RMPCR {
	return RMPCR{mmio.UM32{&p.PCR.U32, uint32(BTAE)}}
}

func (p *DSI_Periph) ECCRXE() RMPCR {
	return RMPCR{mmio.UM32{&p.PCR.U32, uint32(ECCRXE)}}
}

func (p *DSI_Periph) CRCRXE() RMPCR {
	return RMPCR{mmio.UM32{&p.PCR.U32, uint32(CRCRXE)}}
}

type GVCIDR uint32

func (b GVCIDR) Field(mask GVCIDR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GVCIDR) J(v int) GVCIDR {
	return GVCIDR(bits.MakeField32(v, uint32(mask)))
}

type RGVCIDR struct{ mmio.U32 }

func (r *RGVCIDR) Bits(mask GVCIDR) GVCIDR  { return GVCIDR(r.U32.Bits(uint32(mask))) }
func (r *RGVCIDR) StoreBits(mask, b GVCIDR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGVCIDR) SetBits(mask GVCIDR)      { r.U32.SetBits(uint32(mask)) }
func (r *RGVCIDR) ClearBits(mask GVCIDR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGVCIDR) Load() GVCIDR             { return GVCIDR(r.U32.Load()) }
func (r *RGVCIDR) Store(b GVCIDR)           { r.U32.Store(uint32(b)) }

func (r *RGVCIDR) AtomicStoreBits(mask, b GVCIDR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGVCIDR) AtomicSetBits(mask GVCIDR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGVCIDR) AtomicClearBits(mask GVCIDR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGVCIDR struct{ mmio.UM32 }

func (rm RMGVCIDR) Load() GVCIDR   { return GVCIDR(rm.UM32.Load()) }
func (rm RMGVCIDR) Store(b GVCIDR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VCID() RMGVCIDR {
	return RMGVCIDR{mmio.UM32{&p.GVCIDR.U32, uint32(VCID)}}
}

type MCR uint32

func (b MCR) Field(mask MCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MCR) J(v int) MCR {
	return MCR(bits.MakeField32(v, uint32(mask)))
}

type RMCR struct{ mmio.U32 }

func (r *RMCR) Bits(mask MCR) MCR     { return MCR(r.U32.Bits(uint32(mask))) }
func (r *RMCR) StoreBits(mask, b MCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMCR) SetBits(mask MCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RMCR) ClearBits(mask MCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RMCR) Load() MCR             { return MCR(r.U32.Load()) }
func (r *RMCR) Store(b MCR)           { r.U32.Store(uint32(b)) }

func (r *RMCR) AtomicStoreBits(mask, b MCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RMCR) AtomicSetBits(mask MCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RMCR) AtomicClearBits(mask MCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMMCR struct{ mmio.UM32 }

func (rm RMMCR) Load() MCR   { return MCR(rm.UM32.Load()) }
func (rm RMMCR) Store(b MCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) CMDM() RMMCR {
	return RMMCR{mmio.UM32{&p.MCR.U32, uint32(CMDM)}}
}

type VMCR uint32

func (b VMCR) Field(mask VMCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VMCR) J(v int) VMCR {
	return VMCR(bits.MakeField32(v, uint32(mask)))
}

type RVMCR struct{ mmio.U32 }

func (r *RVMCR) Bits(mask VMCR) VMCR    { return VMCR(r.U32.Bits(uint32(mask))) }
func (r *RVMCR) StoreBits(mask, b VMCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVMCR) SetBits(mask VMCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVMCR) ClearBits(mask VMCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVMCR) Load() VMCR             { return VMCR(r.U32.Load()) }
func (r *RVMCR) Store(b VMCR)           { r.U32.Store(uint32(b)) }

func (r *RVMCR) AtomicStoreBits(mask, b VMCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVMCR) AtomicSetBits(mask VMCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVMCR) AtomicClearBits(mask VMCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVMCR struct{ mmio.UM32 }

func (rm RMVMCR) Load() VMCR   { return VMCR(rm.UM32.Load()) }
func (rm RMVMCR) Store(b VMCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VMT() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(VMT)}}
}

func (p *DSI_Periph) LPVSAE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(LPVSAE)}}
}

func (p *DSI_Periph) LPVBPE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(LPVBPE)}}
}

func (p *DSI_Periph) LPVFPE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(LPVFPE)}}
}

func (p *DSI_Periph) LPVAE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(LPVAE)}}
}

func (p *DSI_Periph) LPHBPE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(LPHBPE)}}
}

func (p *DSI_Periph) LPHFPE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(LPHFPE)}}
}

func (p *DSI_Periph) FBTAAE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(FBTAAE)}}
}

func (p *DSI_Periph) LPCE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(LPCE)}}
}

func (p *DSI_Periph) PGE() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(PGE)}}
}

func (p *DSI_Periph) PGM() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(PGM)}}
}

func (p *DSI_Periph) PGO() RMVMCR {
	return RMVMCR{mmio.UM32{&p.VMCR.U32, uint32(PGO)}}
}

type VPCR uint32

func (b VPCR) Field(mask VPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VPCR) J(v int) VPCR {
	return VPCR(bits.MakeField32(v, uint32(mask)))
}

type RVPCR struct{ mmio.U32 }

func (r *RVPCR) Bits(mask VPCR) VPCR    { return VPCR(r.U32.Bits(uint32(mask))) }
func (r *RVPCR) StoreBits(mask, b VPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVPCR) SetBits(mask VPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVPCR) ClearBits(mask VPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVPCR) Load() VPCR             { return VPCR(r.U32.Load()) }
func (r *RVPCR) Store(b VPCR)           { r.U32.Store(uint32(b)) }

func (r *RVPCR) AtomicStoreBits(mask, b VPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVPCR) AtomicSetBits(mask VPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVPCR) AtomicClearBits(mask VPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVPCR struct{ mmio.UM32 }

func (rm RMVPCR) Load() VPCR   { return VPCR(rm.UM32.Load()) }
func (rm RMVPCR) Store(b VPCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VPSIZE() RMVPCR {
	return RMVPCR{mmio.UM32{&p.VPCR.U32, uint32(VPSIZE)}}
}

type VCCR uint32

func (b VCCR) Field(mask VCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VCCR) J(v int) VCCR {
	return VCCR(bits.MakeField32(v, uint32(mask)))
}

type RVCCR struct{ mmio.U32 }

func (r *RVCCR) Bits(mask VCCR) VCCR    { return VCCR(r.U32.Bits(uint32(mask))) }
func (r *RVCCR) StoreBits(mask, b VCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVCCR) SetBits(mask VCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVCCR) ClearBits(mask VCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVCCR) Load() VCCR             { return VCCR(r.U32.Load()) }
func (r *RVCCR) Store(b VCCR)           { r.U32.Store(uint32(b)) }

func (r *RVCCR) AtomicStoreBits(mask, b VCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVCCR) AtomicSetBits(mask VCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVCCR) AtomicClearBits(mask VCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVCCR struct{ mmio.UM32 }

func (rm RMVCCR) Load() VCCR   { return VCCR(rm.UM32.Load()) }
func (rm RMVCCR) Store(b VCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) NUMC() RMVCCR {
	return RMVCCR{mmio.UM32{&p.VCCR.U32, uint32(NUMC)}}
}

type VNPCR uint32

func (b VNPCR) Field(mask VNPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VNPCR) J(v int) VNPCR {
	return VNPCR(bits.MakeField32(v, uint32(mask)))
}

type RVNPCR struct{ mmio.U32 }

func (r *RVNPCR) Bits(mask VNPCR) VNPCR   { return VNPCR(r.U32.Bits(uint32(mask))) }
func (r *RVNPCR) StoreBits(mask, b VNPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVNPCR) SetBits(mask VNPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVNPCR) ClearBits(mask VNPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVNPCR) Load() VNPCR             { return VNPCR(r.U32.Load()) }
func (r *RVNPCR) Store(b VNPCR)           { r.U32.Store(uint32(b)) }

func (r *RVNPCR) AtomicStoreBits(mask, b VNPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVNPCR) AtomicSetBits(mask VNPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVNPCR) AtomicClearBits(mask VNPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVNPCR struct{ mmio.UM32 }

func (rm RMVNPCR) Load() VNPCR   { return VNPCR(rm.UM32.Load()) }
func (rm RMVNPCR) Store(b VNPCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) NPSIZE() RMVNPCR {
	return RMVNPCR{mmio.UM32{&p.VNPCR.U32, uint32(NPSIZE)}}
}

type VHSACR uint32

func (b VHSACR) Field(mask VHSACR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VHSACR) J(v int) VHSACR {
	return VHSACR(bits.MakeField32(v, uint32(mask)))
}

type RVHSACR struct{ mmio.U32 }

func (r *RVHSACR) Bits(mask VHSACR) VHSACR  { return VHSACR(r.U32.Bits(uint32(mask))) }
func (r *RVHSACR) StoreBits(mask, b VHSACR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVHSACR) SetBits(mask VHSACR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVHSACR) ClearBits(mask VHSACR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVHSACR) Load() VHSACR             { return VHSACR(r.U32.Load()) }
func (r *RVHSACR) Store(b VHSACR)           { r.U32.Store(uint32(b)) }

func (r *RVHSACR) AtomicStoreBits(mask, b VHSACR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVHSACR) AtomicSetBits(mask VHSACR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVHSACR) AtomicClearBits(mask VHSACR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVHSACR struct{ mmio.UM32 }

func (rm RMVHSACR) Load() VHSACR   { return VHSACR(rm.UM32.Load()) }
func (rm RMVHSACR) Store(b VHSACR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) HSA() RMVHSACR {
	return RMVHSACR{mmio.UM32{&p.VHSACR.U32, uint32(HSA)}}
}

type VHBPCR uint32

func (b VHBPCR) Field(mask VHBPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VHBPCR) J(v int) VHBPCR {
	return VHBPCR(bits.MakeField32(v, uint32(mask)))
}

type RVHBPCR struct{ mmio.U32 }

func (r *RVHBPCR) Bits(mask VHBPCR) VHBPCR  { return VHBPCR(r.U32.Bits(uint32(mask))) }
func (r *RVHBPCR) StoreBits(mask, b VHBPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVHBPCR) SetBits(mask VHBPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVHBPCR) ClearBits(mask VHBPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVHBPCR) Load() VHBPCR             { return VHBPCR(r.U32.Load()) }
func (r *RVHBPCR) Store(b VHBPCR)           { r.U32.Store(uint32(b)) }

func (r *RVHBPCR) AtomicStoreBits(mask, b VHBPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVHBPCR) AtomicSetBits(mask VHBPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVHBPCR) AtomicClearBits(mask VHBPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVHBPCR struct{ mmio.UM32 }

func (rm RMVHBPCR) Load() VHBPCR   { return VHBPCR(rm.UM32.Load()) }
func (rm RMVHBPCR) Store(b VHBPCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) HBP() RMVHBPCR {
	return RMVHBPCR{mmio.UM32{&p.VHBPCR.U32, uint32(HBP)}}
}

type VLCR uint32

func (b VLCR) Field(mask VLCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VLCR) J(v int) VLCR {
	return VLCR(bits.MakeField32(v, uint32(mask)))
}

type RVLCR struct{ mmio.U32 }

func (r *RVLCR) Bits(mask VLCR) VLCR    { return VLCR(r.U32.Bits(uint32(mask))) }
func (r *RVLCR) StoreBits(mask, b VLCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVLCR) SetBits(mask VLCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVLCR) ClearBits(mask VLCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVLCR) Load() VLCR             { return VLCR(r.U32.Load()) }
func (r *RVLCR) Store(b VLCR)           { r.U32.Store(uint32(b)) }

func (r *RVLCR) AtomicStoreBits(mask, b VLCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVLCR) AtomicSetBits(mask VLCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVLCR) AtomicClearBits(mask VLCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVLCR struct{ mmio.UM32 }

func (rm RMVLCR) Load() VLCR   { return VLCR(rm.UM32.Load()) }
func (rm RMVLCR) Store(b VLCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) HLINE() RMVLCR {
	return RMVLCR{mmio.UM32{&p.VLCR.U32, uint32(HLINE)}}
}

type VVSACR uint32

func (b VVSACR) Field(mask VVSACR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VVSACR) J(v int) VVSACR {
	return VVSACR(bits.MakeField32(v, uint32(mask)))
}

type RVVSACR struct{ mmio.U32 }

func (r *RVVSACR) Bits(mask VVSACR) VVSACR  { return VVSACR(r.U32.Bits(uint32(mask))) }
func (r *RVVSACR) StoreBits(mask, b VVSACR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVVSACR) SetBits(mask VVSACR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVVSACR) ClearBits(mask VVSACR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVVSACR) Load() VVSACR             { return VVSACR(r.U32.Load()) }
func (r *RVVSACR) Store(b VVSACR)           { r.U32.Store(uint32(b)) }

func (r *RVVSACR) AtomicStoreBits(mask, b VVSACR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVVSACR) AtomicSetBits(mask VVSACR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVVSACR) AtomicClearBits(mask VVSACR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVVSACR struct{ mmio.UM32 }

func (rm RMVVSACR) Load() VVSACR   { return VVSACR(rm.UM32.Load()) }
func (rm RMVVSACR) Store(b VVSACR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VSA() RMVVSACR {
	return RMVVSACR{mmio.UM32{&p.VVSACR.U32, uint32(VSA)}}
}

type VVBPCR uint32

func (b VVBPCR) Field(mask VVBPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VVBPCR) J(v int) VVBPCR {
	return VVBPCR(bits.MakeField32(v, uint32(mask)))
}

type RVVBPCR struct{ mmio.U32 }

func (r *RVVBPCR) Bits(mask VVBPCR) VVBPCR  { return VVBPCR(r.U32.Bits(uint32(mask))) }
func (r *RVVBPCR) StoreBits(mask, b VVBPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVVBPCR) SetBits(mask VVBPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVVBPCR) ClearBits(mask VVBPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVVBPCR) Load() VVBPCR             { return VVBPCR(r.U32.Load()) }
func (r *RVVBPCR) Store(b VVBPCR)           { r.U32.Store(uint32(b)) }

func (r *RVVBPCR) AtomicStoreBits(mask, b VVBPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVVBPCR) AtomicSetBits(mask VVBPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVVBPCR) AtomicClearBits(mask VVBPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVVBPCR struct{ mmio.UM32 }

func (rm RMVVBPCR) Load() VVBPCR   { return VVBPCR(rm.UM32.Load()) }
func (rm RMVVBPCR) Store(b VVBPCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VBP() RMVVBPCR {
	return RMVVBPCR{mmio.UM32{&p.VVBPCR.U32, uint32(VBP)}}
}

type VVFPCR uint32

func (b VVFPCR) Field(mask VVFPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VVFPCR) J(v int) VVFPCR {
	return VVFPCR(bits.MakeField32(v, uint32(mask)))
}

type RVVFPCR struct{ mmio.U32 }

func (r *RVVFPCR) Bits(mask VVFPCR) VVFPCR  { return VVFPCR(r.U32.Bits(uint32(mask))) }
func (r *RVVFPCR) StoreBits(mask, b VVFPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVVFPCR) SetBits(mask VVFPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVVFPCR) ClearBits(mask VVFPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVVFPCR) Load() VVFPCR             { return VVFPCR(r.U32.Load()) }
func (r *RVVFPCR) Store(b VVFPCR)           { r.U32.Store(uint32(b)) }

func (r *RVVFPCR) AtomicStoreBits(mask, b VVFPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVVFPCR) AtomicSetBits(mask VVFPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVVFPCR) AtomicClearBits(mask VVFPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVVFPCR struct{ mmio.UM32 }

func (rm RMVVFPCR) Load() VVFPCR   { return VVFPCR(rm.UM32.Load()) }
func (rm RMVVFPCR) Store(b VVFPCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VFP() RMVVFPCR {
	return RMVVFPCR{mmio.UM32{&p.VVFPCR.U32, uint32(VFP)}}
}

type VVACR uint32

func (b VVACR) Field(mask VVACR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VVACR) J(v int) VVACR {
	return VVACR(bits.MakeField32(v, uint32(mask)))
}

type RVVACR struct{ mmio.U32 }

func (r *RVVACR) Bits(mask VVACR) VVACR   { return VVACR(r.U32.Bits(uint32(mask))) }
func (r *RVVACR) StoreBits(mask, b VVACR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVVACR) SetBits(mask VVACR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVVACR) ClearBits(mask VVACR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVVACR) Load() VVACR             { return VVACR(r.U32.Load()) }
func (r *RVVACR) Store(b VVACR)           { r.U32.Store(uint32(b)) }

func (r *RVVACR) AtomicStoreBits(mask, b VVACR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVVACR) AtomicSetBits(mask VVACR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVVACR) AtomicClearBits(mask VVACR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVVACR struct{ mmio.UM32 }

func (rm RMVVACR) Load() VVACR   { return VVACR(rm.UM32.Load()) }
func (rm RMVVACR) Store(b VVACR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VA() RMVVACR {
	return RMVVACR{mmio.UM32{&p.VVACR.U32, uint32(VA)}}
}

type LCCR uint32

func (b LCCR) Field(mask LCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LCCR) J(v int) LCCR {
	return LCCR(bits.MakeField32(v, uint32(mask)))
}

type RLCCR struct{ mmio.U32 }

func (r *RLCCR) Bits(mask LCCR) LCCR    { return LCCR(r.U32.Bits(uint32(mask))) }
func (r *RLCCR) StoreBits(mask, b LCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLCCR) SetBits(mask LCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLCCR) ClearBits(mask LCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLCCR) Load() LCCR             { return LCCR(r.U32.Load()) }
func (r *RLCCR) Store(b LCCR)           { r.U32.Store(uint32(b)) }

func (r *RLCCR) AtomicStoreBits(mask, b LCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RLCCR) AtomicSetBits(mask LCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RLCCR) AtomicClearBits(mask LCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMLCCR struct{ mmio.UM32 }

func (rm RMLCCR) Load() LCCR   { return LCCR(rm.UM32.Load()) }
func (rm RMLCCR) Store(b LCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) CMDSIZE() RMLCCR {
	return RMLCCR{mmio.UM32{&p.LCCR.U32, uint32(CMDSIZE)}}
}

type CMCR uint32

func (b CMCR) Field(mask CMCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CMCR) J(v int) CMCR {
	return CMCR(bits.MakeField32(v, uint32(mask)))
}

type RCMCR struct{ mmio.U32 }

func (r *RCMCR) Bits(mask CMCR) CMCR    { return CMCR(r.U32.Bits(uint32(mask))) }
func (r *RCMCR) StoreBits(mask, b CMCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCMCR) SetBits(mask CMCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCMCR) ClearBits(mask CMCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCMCR) Load() CMCR             { return CMCR(r.U32.Load()) }
func (r *RCMCR) Store(b CMCR)           { r.U32.Store(uint32(b)) }

func (r *RCMCR) AtomicStoreBits(mask, b CMCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCMCR) AtomicSetBits(mask CMCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCMCR) AtomicClearBits(mask CMCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCMCR struct{ mmio.UM32 }

func (rm RMCMCR) Load() CMCR   { return CMCR(rm.UM32.Load()) }
func (rm RMCMCR) Store(b CMCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) TEARE() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(TEARE)}}
}

func (p *DSI_Periph) ARE() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(ARE)}}
}

func (p *DSI_Periph) GSW0TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(GSW0TX)}}
}

func (p *DSI_Periph) GSW1TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(GSW1TX)}}
}

func (p *DSI_Periph) GSW2TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(GSW2TX)}}
}

func (p *DSI_Periph) GSR0TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(GSR0TX)}}
}

func (p *DSI_Periph) GSR1TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(GSR1TX)}}
}

func (p *DSI_Periph) GSR2TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(GSR2TX)}}
}

func (p *DSI_Periph) GLWTX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(GLWTX)}}
}

func (p *DSI_Periph) DSW0TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(DSW0TX)}}
}

func (p *DSI_Periph) DSW1TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(DSW1TX)}}
}

func (p *DSI_Periph) DSR0TX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(DSR0TX)}}
}

func (p *DSI_Periph) DLWTX() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(DLWTX)}}
}

func (p *DSI_Periph) MRDPS() RMCMCR {
	return RMCMCR{mmio.UM32{&p.CMCR.U32, uint32(MRDPS)}}
}

type GHCR uint32

func (b GHCR) Field(mask GHCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GHCR) J(v int) GHCR {
	return GHCR(bits.MakeField32(v, uint32(mask)))
}

type RGHCR struct{ mmio.U32 }

func (r *RGHCR) Bits(mask GHCR) GHCR    { return GHCR(r.U32.Bits(uint32(mask))) }
func (r *RGHCR) StoreBits(mask, b GHCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGHCR) SetBits(mask GHCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RGHCR) ClearBits(mask GHCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGHCR) Load() GHCR             { return GHCR(r.U32.Load()) }
func (r *RGHCR) Store(b GHCR)           { r.U32.Store(uint32(b)) }

func (r *RGHCR) AtomicStoreBits(mask, b GHCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGHCR) AtomicSetBits(mask GHCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGHCR) AtomicClearBits(mask GHCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGHCR struct{ mmio.UM32 }

func (rm RMGHCR) Load() GHCR   { return GHCR(rm.UM32.Load()) }
func (rm RMGHCR) Store(b GHCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) DT() RMGHCR {
	return RMGHCR{mmio.UM32{&p.GHCR.U32, uint32(DT)}}
}

func (p *DSI_Periph) VCID() RMGHCR {
	return RMGHCR{mmio.UM32{&p.GHCR.U32, uint32(VCID)}}
}

func (p *DSI_Periph) WCLSB() RMGHCR {
	return RMGHCR{mmio.UM32{&p.GHCR.U32, uint32(WCLSB)}}
}

func (p *DSI_Periph) WCMSB() RMGHCR {
	return RMGHCR{mmio.UM32{&p.GHCR.U32, uint32(WCMSB)}}
}

type GPDR uint32

func (b GPDR) Field(mask GPDR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GPDR) J(v int) GPDR {
	return GPDR(bits.MakeField32(v, uint32(mask)))
}

type RGPDR struct{ mmio.U32 }

func (r *RGPDR) Bits(mask GPDR) GPDR    { return GPDR(r.U32.Bits(uint32(mask))) }
func (r *RGPDR) StoreBits(mask, b GPDR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPDR) SetBits(mask GPDR)      { r.U32.SetBits(uint32(mask)) }
func (r *RGPDR) ClearBits(mask GPDR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGPDR) Load() GPDR             { return GPDR(r.U32.Load()) }
func (r *RGPDR) Store(b GPDR)           { r.U32.Store(uint32(b)) }

func (r *RGPDR) AtomicStoreBits(mask, b GPDR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGPDR) AtomicSetBits(mask GPDR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGPDR) AtomicClearBits(mask GPDR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGPDR struct{ mmio.UM32 }

func (rm RMGPDR) Load() GPDR   { return GPDR(rm.UM32.Load()) }
func (rm RMGPDR) Store(b GPDR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) DATA1() RMGPDR {
	return RMGPDR{mmio.UM32{&p.GPDR.U32, uint32(DATA1)}}
}

func (p *DSI_Periph) DATA2() RMGPDR {
	return RMGPDR{mmio.UM32{&p.GPDR.U32, uint32(DATA2)}}
}

func (p *DSI_Periph) DATA3() RMGPDR {
	return RMGPDR{mmio.UM32{&p.GPDR.U32, uint32(DATA3)}}
}

func (p *DSI_Periph) DATA4() RMGPDR {
	return RMGPDR{mmio.UM32{&p.GPDR.U32, uint32(DATA4)}}
}

type GPSR uint32

func (b GPSR) Field(mask GPSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask GPSR) J(v int) GPSR {
	return GPSR(bits.MakeField32(v, uint32(mask)))
}

type RGPSR struct{ mmio.U32 }

func (r *RGPSR) Bits(mask GPSR) GPSR    { return GPSR(r.U32.Bits(uint32(mask))) }
func (r *RGPSR) StoreBits(mask, b GPSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPSR) SetBits(mask GPSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RGPSR) ClearBits(mask GPSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGPSR) Load() GPSR             { return GPSR(r.U32.Load()) }
func (r *RGPSR) Store(b GPSR)           { r.U32.Store(uint32(b)) }

func (r *RGPSR) AtomicStoreBits(mask, b GPSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RGPSR) AtomicSetBits(mask GPSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RGPSR) AtomicClearBits(mask GPSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMGPSR struct{ mmio.UM32 }

func (rm RMGPSR) Load() GPSR   { return GPSR(rm.UM32.Load()) }
func (rm RMGPSR) Store(b GPSR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) CMDFE() RMGPSR {
	return RMGPSR{mmio.UM32{&p.GPSR.U32, uint32(CMDFE)}}
}

func (p *DSI_Periph) CMDFF() RMGPSR {
	return RMGPSR{mmio.UM32{&p.GPSR.U32, uint32(CMDFF)}}
}

func (p *DSI_Periph) PWRFE() RMGPSR {
	return RMGPSR{mmio.UM32{&p.GPSR.U32, uint32(PWRFE)}}
}

func (p *DSI_Periph) PWRFF() RMGPSR {
	return RMGPSR{mmio.UM32{&p.GPSR.U32, uint32(PWRFF)}}
}

func (p *DSI_Periph) PRDFE() RMGPSR {
	return RMGPSR{mmio.UM32{&p.GPSR.U32, uint32(PRDFE)}}
}

func (p *DSI_Periph) PRDFF() RMGPSR {
	return RMGPSR{mmio.UM32{&p.GPSR.U32, uint32(PRDFF)}}
}

func (p *DSI_Periph) RCB() RMGPSR {
	return RMGPSR{mmio.UM32{&p.GPSR.U32, uint32(RCB)}}
}

type TCCR uint32

func (b TCCR) Field(mask TCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TCCR) J(v int) TCCR {
	return TCCR(bits.MakeField32(v, uint32(mask)))
}

type RTCCR struct{ mmio.U32 }

func (r *RTCCR) Bits(mask TCCR) TCCR    { return TCCR(r.U32.Bits(uint32(mask))) }
func (r *RTCCR) StoreBits(mask, b TCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTCCR) SetBits(mask TCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RTCCR) ClearBits(mask TCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTCCR) Load() TCCR             { return TCCR(r.U32.Load()) }
func (r *RTCCR) Store(b TCCR)           { r.U32.Store(uint32(b)) }

func (r *RTCCR) AtomicStoreBits(mask, b TCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RTCCR) AtomicSetBits(mask TCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RTCCR) AtomicClearBits(mask TCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMTCCR struct{ mmio.UM32 }

func (rm RMTCCR) Load() TCCR   { return TCCR(rm.UM32.Load()) }
func (rm RMTCCR) Store(b TCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) HSRD_TOCNT(n int) RMTCCR {
	return RMTCCR{mmio.UM32{&p.TCCR[n].U32, uint32(HSRD_TOCNT)}}
}

type TDCR uint32

func (b TDCR) Field(mask TDCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TDCR) J(v int) TDCR {
	return TDCR(bits.MakeField32(v, uint32(mask)))
}

type RTDCR struct{ mmio.U32 }

func (r *RTDCR) Bits(mask TDCR) TDCR    { return TDCR(r.U32.Bits(uint32(mask))) }
func (r *RTDCR) StoreBits(mask, b TDCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTDCR) SetBits(mask TDCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RTDCR) ClearBits(mask TDCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTDCR) Load() TDCR             { return TDCR(r.U32.Load()) }
func (r *RTDCR) Store(b TDCR)           { r.U32.Store(uint32(b)) }

func (r *RTDCR) AtomicStoreBits(mask, b TDCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RTDCR) AtomicSetBits(mask TDCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RTDCR) AtomicClearBits(mask TDCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMTDCR struct{ mmio.UM32 }

func (rm RMTDCR) Load() TDCR   { return TDCR(rm.UM32.Load()) }
func (rm RMTDCR) Store(b TDCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) V3DM() RMTDCR {
	return RMTDCR{mmio.UM32{&p.TDCR.U32, uint32(V3DM)}}
}

func (p *DSI_Periph) V3DF() RMTDCR {
	return RMTDCR{mmio.UM32{&p.TDCR.U32, uint32(V3DF)}}
}

func (p *DSI_Periph) SVS() RMTDCR {
	return RMTDCR{mmio.UM32{&p.TDCR.U32, uint32(SVS)}}
}

func (p *DSI_Periph) RF() RMTDCR {
	return RMTDCR{mmio.UM32{&p.TDCR.U32, uint32(RF)}}
}

func (p *DSI_Periph) S3DC() RMTDCR {
	return RMTDCR{mmio.UM32{&p.TDCR.U32, uint32(S3DC)}}
}

type CLCR uint32

func (b CLCR) Field(mask CLCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CLCR) J(v int) CLCR {
	return CLCR(bits.MakeField32(v, uint32(mask)))
}

type RCLCR struct{ mmio.U32 }

func (r *RCLCR) Bits(mask CLCR) CLCR    { return CLCR(r.U32.Bits(uint32(mask))) }
func (r *RCLCR) StoreBits(mask, b CLCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLCR) SetBits(mask CLCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCLCR) ClearBits(mask CLCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCLCR) Load() CLCR             { return CLCR(r.U32.Load()) }
func (r *RCLCR) Store(b CLCR)           { r.U32.Store(uint32(b)) }

func (r *RCLCR) AtomicStoreBits(mask, b CLCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCLCR) AtomicSetBits(mask CLCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCLCR) AtomicClearBits(mask CLCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCLCR struct{ mmio.UM32 }

func (rm RMCLCR) Load() CLCR   { return CLCR(rm.UM32.Load()) }
func (rm RMCLCR) Store(b CLCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) DPCC() RMCLCR {
	return RMCLCR{mmio.UM32{&p.CLCR.U32, uint32(DPCC)}}
}

func (p *DSI_Periph) ACR() RMCLCR {
	return RMCLCR{mmio.UM32{&p.CLCR.U32, uint32(ACR)}}
}

type CLTCR uint32

func (b CLTCR) Field(mask CLTCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CLTCR) J(v int) CLTCR {
	return CLTCR(bits.MakeField32(v, uint32(mask)))
}

type RCLTCR struct{ mmio.U32 }

func (r *RCLTCR) Bits(mask CLTCR) CLTCR   { return CLTCR(r.U32.Bits(uint32(mask))) }
func (r *RCLTCR) StoreBits(mask, b CLTCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLTCR) SetBits(mask CLTCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCLTCR) ClearBits(mask CLTCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCLTCR) Load() CLTCR             { return CLTCR(r.U32.Load()) }
func (r *RCLTCR) Store(b CLTCR)           { r.U32.Store(uint32(b)) }

func (r *RCLTCR) AtomicStoreBits(mask, b CLTCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCLTCR) AtomicSetBits(mask CLTCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCLTCR) AtomicClearBits(mask CLTCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCLTCR struct{ mmio.UM32 }

func (rm RMCLTCR) Load() CLTCR   { return CLTCR(rm.UM32.Load()) }
func (rm RMCLTCR) Store(b CLTCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) LP2HS_TIME() RMCLTCR {
	return RMCLTCR{mmio.UM32{&p.CLTCR.U32, uint32(LP2HS_TIME)}}
}

func (p *DSI_Periph) HS2LP_TIME() RMCLTCR {
	return RMCLTCR{mmio.UM32{&p.CLTCR.U32, uint32(HS2LP_TIME)}}
}

type DLTCR uint32

func (b DLTCR) Field(mask DLTCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DLTCR) J(v int) DLTCR {
	return DLTCR(bits.MakeField32(v, uint32(mask)))
}

type RDLTCR struct{ mmio.U32 }

func (r *RDLTCR) Bits(mask DLTCR) DLTCR   { return DLTCR(r.U32.Bits(uint32(mask))) }
func (r *RDLTCR) StoreBits(mask, b DLTCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDLTCR) SetBits(mask DLTCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RDLTCR) ClearBits(mask DLTCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDLTCR) Load() DLTCR             { return DLTCR(r.U32.Load()) }
func (r *RDLTCR) Store(b DLTCR)           { r.U32.Store(uint32(b)) }

func (r *RDLTCR) AtomicStoreBits(mask, b DLTCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RDLTCR) AtomicSetBits(mask DLTCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RDLTCR) AtomicClearBits(mask DLTCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMDLTCR struct{ mmio.UM32 }

func (rm RMDLTCR) Load() DLTCR   { return DLTCR(rm.UM32.Load()) }
func (rm RMDLTCR) Store(b DLTCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) MRD_TIME() RMDLTCR {
	return RMDLTCR{mmio.UM32{&p.DLTCR.U32, uint32(MRD_TIME)}}
}

func (p *DSI_Periph) LP2HS_TIME() RMDLTCR {
	return RMDLTCR{mmio.UM32{&p.DLTCR.U32, uint32(LP2HS_TIME)}}
}

func (p *DSI_Periph) HS2LP_TIME() RMDLTCR {
	return RMDLTCR{mmio.UM32{&p.DLTCR.U32, uint32(HS2LP_TIME)}}
}

type PCTLR uint32

func (b PCTLR) Field(mask PCTLR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PCTLR) J(v int) PCTLR {
	return PCTLR(bits.MakeField32(v, uint32(mask)))
}

type RPCTLR struct{ mmio.U32 }

func (r *RPCTLR) Bits(mask PCTLR) PCTLR   { return PCTLR(r.U32.Bits(uint32(mask))) }
func (r *RPCTLR) StoreBits(mask, b PCTLR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPCTLR) SetBits(mask PCTLR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPCTLR) ClearBits(mask PCTLR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPCTLR) Load() PCTLR             { return PCTLR(r.U32.Load()) }
func (r *RPCTLR) Store(b PCTLR)           { r.U32.Store(uint32(b)) }

func (r *RPCTLR) AtomicStoreBits(mask, b PCTLR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPCTLR) AtomicSetBits(mask PCTLR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPCTLR) AtomicClearBits(mask PCTLR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPCTLR struct{ mmio.UM32 }

func (rm RMPCTLR) Load() PCTLR   { return PCTLR(rm.UM32.Load()) }
func (rm RMPCTLR) Store(b PCTLR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) DEN() RMPCTLR {
	return RMPCTLR{mmio.UM32{&p.PCTLR.U32, uint32(DEN)}}
}

func (p *DSI_Periph) CKE() RMPCTLR {
	return RMPCTLR{mmio.UM32{&p.PCTLR.U32, uint32(CKE)}}
}

type PCONFR uint32

func (b PCONFR) Field(mask PCONFR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PCONFR) J(v int) PCONFR {
	return PCONFR(bits.MakeField32(v, uint32(mask)))
}

type RPCONFR struct{ mmio.U32 }

func (r *RPCONFR) Bits(mask PCONFR) PCONFR  { return PCONFR(r.U32.Bits(uint32(mask))) }
func (r *RPCONFR) StoreBits(mask, b PCONFR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPCONFR) SetBits(mask PCONFR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPCONFR) ClearBits(mask PCONFR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPCONFR) Load() PCONFR             { return PCONFR(r.U32.Load()) }
func (r *RPCONFR) Store(b PCONFR)           { r.U32.Store(uint32(b)) }

func (r *RPCONFR) AtomicStoreBits(mask, b PCONFR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPCONFR) AtomicSetBits(mask PCONFR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPCONFR) AtomicClearBits(mask PCONFR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPCONFR struct{ mmio.UM32 }

func (rm RMPCONFR) Load() PCONFR   { return PCONFR(rm.UM32.Load()) }
func (rm RMPCONFR) Store(b PCONFR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) NL() RMPCONFR {
	return RMPCONFR{mmio.UM32{&p.PCONFR.U32, uint32(NL)}}
}

func (p *DSI_Periph) SW_TIME() RMPCONFR {
	return RMPCONFR{mmio.UM32{&p.PCONFR.U32, uint32(SW_TIME)}}
}

type PUCR uint32

func (b PUCR) Field(mask PUCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PUCR) J(v int) PUCR {
	return PUCR(bits.MakeField32(v, uint32(mask)))
}

type RPUCR struct{ mmio.U32 }

func (r *RPUCR) Bits(mask PUCR) PUCR    { return PUCR(r.U32.Bits(uint32(mask))) }
func (r *RPUCR) StoreBits(mask, b PUCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPUCR) SetBits(mask PUCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPUCR) ClearBits(mask PUCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPUCR) Load() PUCR             { return PUCR(r.U32.Load()) }
func (r *RPUCR) Store(b PUCR)           { r.U32.Store(uint32(b)) }

func (r *RPUCR) AtomicStoreBits(mask, b PUCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPUCR) AtomicSetBits(mask PUCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPUCR) AtomicClearBits(mask PUCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPUCR struct{ mmio.UM32 }

func (rm RMPUCR) Load() PUCR   { return PUCR(rm.UM32.Load()) }
func (rm RMPUCR) Store(b PUCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) URCL() RMPUCR {
	return RMPUCR{mmio.UM32{&p.PUCR.U32, uint32(URCL)}}
}

func (p *DSI_Periph) UECL() RMPUCR {
	return RMPUCR{mmio.UM32{&p.PUCR.U32, uint32(UECL)}}
}

func (p *DSI_Periph) URDL() RMPUCR {
	return RMPUCR{mmio.UM32{&p.PUCR.U32, uint32(URDL)}}
}

func (p *DSI_Periph) UEDL() RMPUCR {
	return RMPUCR{mmio.UM32{&p.PUCR.U32, uint32(UEDL)}}
}

type PTTCR uint32

func (b PTTCR) Field(mask PTTCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PTTCR) J(v int) PTTCR {
	return PTTCR(bits.MakeField32(v, uint32(mask)))
}

type RPTTCR struct{ mmio.U32 }

func (r *RPTTCR) Bits(mask PTTCR) PTTCR   { return PTTCR(r.U32.Bits(uint32(mask))) }
func (r *RPTTCR) StoreBits(mask, b PTTCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPTTCR) SetBits(mask PTTCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPTTCR) ClearBits(mask PTTCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPTTCR) Load() PTTCR             { return PTTCR(r.U32.Load()) }
func (r *RPTTCR) Store(b PTTCR)           { r.U32.Store(uint32(b)) }

func (r *RPTTCR) AtomicStoreBits(mask, b PTTCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPTTCR) AtomicSetBits(mask PTTCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPTTCR) AtomicClearBits(mask PTTCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPTTCR struct{ mmio.UM32 }

func (rm RMPTTCR) Load() PTTCR   { return PTTCR(rm.UM32.Load()) }
func (rm RMPTTCR) Store(b PTTCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) TX_TRIG() RMPTTCR {
	return RMPTTCR{mmio.UM32{&p.PTTCR.U32, uint32(TX_TRIG)}}
}

type PSR uint32

func (b PSR) Field(mask PSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PSR) J(v int) PSR {
	return PSR(bits.MakeField32(v, uint32(mask)))
}

type RPSR struct{ mmio.U32 }

func (r *RPSR) Bits(mask PSR) PSR     { return PSR(r.U32.Bits(uint32(mask))) }
func (r *RPSR) StoreBits(mask, b PSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSR) SetBits(mask PSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPSR) ClearBits(mask PSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPSR) Load() PSR             { return PSR(r.U32.Load()) }
func (r *RPSR) Store(b PSR)           { r.U32.Store(uint32(b)) }

func (r *RPSR) AtomicStoreBits(mask, b PSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPSR) AtomicSetBits(mask PSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPSR) AtomicClearBits(mask PSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPSR struct{ mmio.UM32 }

func (rm RMPSR) Load() PSR   { return PSR(rm.UM32.Load()) }
func (rm RMPSR) Store(b PSR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) PD() RMPSR {
	return RMPSR{mmio.UM32{&p.PSR.U32, uint32(PD)}}
}

func (p *DSI_Periph) PSSC() RMPSR {
	return RMPSR{mmio.UM32{&p.PSR.U32, uint32(PSSC)}}
}

func (p *DSI_Periph) UANC() RMPSR {
	return RMPSR{mmio.UM32{&p.PSR.U32, uint32(UANC)}}
}

func (p *DSI_Periph) PSS0() RMPSR {
	return RMPSR{mmio.UM32{&p.PSR.U32, uint32(PSS0)}}
}

func (p *DSI_Periph) UAN0() RMPSR {
	return RMPSR{mmio.UM32{&p.PSR.U32, uint32(UAN0)}}
}

func (p *DSI_Periph) RUE0() RMPSR {
	return RMPSR{mmio.UM32{&p.PSR.U32, uint32(RUE0)}}
}

func (p *DSI_Periph) PSS1() RMPSR {
	return RMPSR{mmio.UM32{&p.PSR.U32, uint32(PSS1)}}
}

func (p *DSI_Periph) UAN1() RMPSR {
	return RMPSR{mmio.UM32{&p.PSR.U32, uint32(UAN1)}}
}

type ISR uint32

func (b ISR) Field(mask ISR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ISR) J(v int) ISR {
	return ISR(bits.MakeField32(v, uint32(mask)))
}

type RISR struct{ mmio.U32 }

func (r *RISR) Bits(mask ISR) ISR     { return ISR(r.U32.Bits(uint32(mask))) }
func (r *RISR) StoreBits(mask, b ISR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RISR) SetBits(mask ISR)      { r.U32.SetBits(uint32(mask)) }
func (r *RISR) ClearBits(mask ISR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RISR) Load() ISR             { return ISR(r.U32.Load()) }
func (r *RISR) Store(b ISR)           { r.U32.Store(uint32(b)) }

func (r *RISR) AtomicStoreBits(mask, b ISR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RISR) AtomicSetBits(mask ISR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RISR) AtomicClearBits(mask ISR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMISR struct{ mmio.UM32 }

func (rm RMISR) Load() ISR   { return ISR(rm.UM32.Load()) }
func (rm RMISR) Store(b ISR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) TOHSTX(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(TOHSTX)}}
}

func (p *DSI_Periph) TOLPRX(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(TOLPRX)}}
}

func (p *DSI_Periph) ECCSE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(ECCSE)}}
}

func (p *DSI_Periph) ECCME(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(ECCME)}}
}

func (p *DSI_Periph) CRCE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(CRCE)}}
}

func (p *DSI_Periph) PSE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(PSE)}}
}

func (p *DSI_Periph) EOTPE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(EOTPE)}}
}

func (p *DSI_Periph) LPWRE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(LPWRE)}}
}

func (p *DSI_Periph) GCWRE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(GCWRE)}}
}

func (p *DSI_Periph) GPWRE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(GPWRE)}}
}

func (p *DSI_Periph) GPTXE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(GPTXE)}}
}

func (p *DSI_Periph) GPRDE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(GPRDE)}}
}

func (p *DSI_Periph) GPRXE(n int) RMISR {
	return RMISR{mmio.UM32{&p.ISR[n].U32, uint32(GPRXE)}}
}

type IER uint32

func (b IER) Field(mask IER) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IER) J(v int) IER {
	return IER(bits.MakeField32(v, uint32(mask)))
}

type RIER struct{ mmio.U32 }

func (r *RIER) Bits(mask IER) IER     { return IER(r.U32.Bits(uint32(mask))) }
func (r *RIER) StoreBits(mask, b IER) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIER) SetBits(mask IER)      { r.U32.SetBits(uint32(mask)) }
func (r *RIER) ClearBits(mask IER)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIER) Load() IER             { return IER(r.U32.Load()) }
func (r *RIER) Store(b IER)           { r.U32.Store(uint32(b)) }

func (r *RIER) AtomicStoreBits(mask, b IER) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIER) AtomicSetBits(mask IER)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIER) AtomicClearBits(mask IER)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIER struct{ mmio.UM32 }

func (rm RMIER) Load() IER   { return IER(rm.UM32.Load()) }
func (rm RMIER) Store(b IER) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) TOHSTXIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(TOHSTXIE)}}
}

func (p *DSI_Periph) TOLPRXIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(TOLPRXIE)}}
}

func (p *DSI_Periph) ECCSEIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(ECCSEIE)}}
}

func (p *DSI_Periph) ECCMEIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(ECCMEIE)}}
}

func (p *DSI_Periph) CRCEIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(CRCEIE)}}
}

func (p *DSI_Periph) PSEIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(PSEIE)}}
}

func (p *DSI_Periph) EOTPEIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(EOTPEIE)}}
}

func (p *DSI_Periph) LPWREIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(LPWREIE)}}
}

func (p *DSI_Periph) GCWREIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(GCWREIE)}}
}

func (p *DSI_Periph) GPWREIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(GPWREIE)}}
}

func (p *DSI_Periph) GPTXEIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(GPTXEIE)}}
}

func (p *DSI_Periph) GPRDEIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(GPRDEIE)}}
}

func (p *DSI_Periph) GPRXEIE(n int) RMIER {
	return RMIER{mmio.UM32{&p.IER[n].U32, uint32(GPRXEIE)}}
}

type FIR uint32

func (b FIR) Field(mask FIR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FIR) J(v int) FIR {
	return FIR(bits.MakeField32(v, uint32(mask)))
}

type RFIR struct{ mmio.U32 }

func (r *RFIR) Bits(mask FIR) FIR     { return FIR(r.U32.Bits(uint32(mask))) }
func (r *RFIR) StoreBits(mask, b FIR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFIR) SetBits(mask FIR)      { r.U32.SetBits(uint32(mask)) }
func (r *RFIR) ClearBits(mask FIR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFIR) Load() FIR             { return FIR(r.U32.Load()) }
func (r *RFIR) Store(b FIR)           { r.U32.Store(uint32(b)) }

func (r *RFIR) AtomicStoreBits(mask, b FIR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFIR) AtomicSetBits(mask FIR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFIR) AtomicClearBits(mask FIR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFIR struct{ mmio.UM32 }

func (rm RMFIR) Load() FIR   { return FIR(rm.UM32.Load()) }
func (rm RMFIR) Store(b FIR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) FTOHSTX(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FTOHSTX)}}
}

func (p *DSI_Periph) FTOLPRX(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FTOLPRX)}}
}

func (p *DSI_Periph) FECCSE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FECCSE)}}
}

func (p *DSI_Periph) FECCME(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FECCME)}}
}

func (p *DSI_Periph) FCRCE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FCRCE)}}
}

func (p *DSI_Periph) FPSE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FPSE)}}
}

func (p *DSI_Periph) FEOTPE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FEOTPE)}}
}

func (p *DSI_Periph) FLPWRE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FLPWRE)}}
}

func (p *DSI_Periph) FGCWRE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FGCWRE)}}
}

func (p *DSI_Periph) FGPWRE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FGPWRE)}}
}

func (p *DSI_Periph) FGPTXE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FGPTXE)}}
}

func (p *DSI_Periph) FGPRDE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FGPRDE)}}
}

func (p *DSI_Periph) FGPRXE(n int) RMFIR {
	return RMFIR{mmio.UM32{&p.FIR[n].U32, uint32(FGPRXE)}}
}

type VSCR uint32

func (b VSCR) Field(mask VSCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VSCR) J(v int) VSCR {
	return VSCR(bits.MakeField32(v, uint32(mask)))
}

type RVSCR struct{ mmio.U32 }

func (r *RVSCR) Bits(mask VSCR) VSCR    { return VSCR(r.U32.Bits(uint32(mask))) }
func (r *RVSCR) StoreBits(mask, b VSCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVSCR) SetBits(mask VSCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVSCR) ClearBits(mask VSCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVSCR) Load() VSCR             { return VSCR(r.U32.Load()) }
func (r *RVSCR) Store(b VSCR)           { r.U32.Store(uint32(b)) }

func (r *RVSCR) AtomicStoreBits(mask, b VSCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVSCR) AtomicSetBits(mask VSCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVSCR) AtomicClearBits(mask VSCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVSCR struct{ mmio.UM32 }

func (rm RMVSCR) Load() VSCR   { return VSCR(rm.UM32.Load()) }
func (rm RMVSCR) Store(b VSCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) EN() RMVSCR {
	return RMVSCR{mmio.UM32{&p.VSCR.U32, uint32(EN)}}
}

func (p *DSI_Periph) UR() RMVSCR {
	return RMVSCR{mmio.UM32{&p.VSCR.U32, uint32(UR)}}
}

type LCVCIDR uint32

func (b LCVCIDR) Field(mask LCVCIDR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LCVCIDR) J(v int) LCVCIDR {
	return LCVCIDR(bits.MakeField32(v, uint32(mask)))
}

type RLCVCIDR struct{ mmio.U32 }

func (r *RLCVCIDR) Bits(mask LCVCIDR) LCVCIDR { return LCVCIDR(r.U32.Bits(uint32(mask))) }
func (r *RLCVCIDR) StoreBits(mask, b LCVCIDR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLCVCIDR) SetBits(mask LCVCIDR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLCVCIDR) ClearBits(mask LCVCIDR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLCVCIDR) Load() LCVCIDR             { return LCVCIDR(r.U32.Load()) }
func (r *RLCVCIDR) Store(b LCVCIDR)           { r.U32.Store(uint32(b)) }

func (r *RLCVCIDR) AtomicStoreBits(mask, b LCVCIDR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RLCVCIDR) AtomicSetBits(mask LCVCIDR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RLCVCIDR) AtomicClearBits(mask LCVCIDR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMLCVCIDR struct{ mmio.UM32 }

func (rm RMLCVCIDR) Load() LCVCIDR   { return LCVCIDR(rm.UM32.Load()) }
func (rm RMLCVCIDR) Store(b LCVCIDR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VCID() RMLCVCIDR {
	return RMLCVCIDR{mmio.UM32{&p.LCVCIDR.U32, uint32(VCID)}}
}

type LCCCR uint32

func (b LCCCR) Field(mask LCCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LCCCR) J(v int) LCCCR {
	return LCCCR(bits.MakeField32(v, uint32(mask)))
}

type RLCCCR struct{ mmio.U32 }

func (r *RLCCCR) Bits(mask LCCCR) LCCCR   { return LCCCR(r.U32.Bits(uint32(mask))) }
func (r *RLCCCR) StoreBits(mask, b LCCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLCCCR) SetBits(mask LCCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLCCCR) ClearBits(mask LCCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLCCCR) Load() LCCCR             { return LCCCR(r.U32.Load()) }
func (r *RLCCCR) Store(b LCCCR)           { r.U32.Store(uint32(b)) }

func (r *RLCCCR) AtomicStoreBits(mask, b LCCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RLCCCR) AtomicSetBits(mask LCCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RLCCCR) AtomicClearBits(mask LCCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMLCCCR struct{ mmio.UM32 }

func (rm RMLCCCR) Load() LCCCR   { return LCCCR(rm.UM32.Load()) }
func (rm RMLCCCR) Store(b LCCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) COLC() RMLCCCR {
	return RMLCCCR{mmio.UM32{&p.LCCCR.U32, uint32(COLC)}}
}

func (p *DSI_Periph) LPE() RMLCCCR {
	return RMLCCCR{mmio.UM32{&p.LCCCR.U32, uint32(LPE)}}
}

type LPMCCR uint32

func (b LPMCCR) Field(mask LPMCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LPMCCR) J(v int) LPMCCR {
	return LPMCCR(bits.MakeField32(v, uint32(mask)))
}

type RLPMCCR struct{ mmio.U32 }

func (r *RLPMCCR) Bits(mask LPMCCR) LPMCCR  { return LPMCCR(r.U32.Bits(uint32(mask))) }
func (r *RLPMCCR) StoreBits(mask, b LPMCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLPMCCR) SetBits(mask LPMCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLPMCCR) ClearBits(mask LPMCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLPMCCR) Load() LPMCCR             { return LPMCCR(r.U32.Load()) }
func (r *RLPMCCR) Store(b LPMCCR)           { r.U32.Store(uint32(b)) }

func (r *RLPMCCR) AtomicStoreBits(mask, b LPMCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RLPMCCR) AtomicSetBits(mask LPMCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RLPMCCR) AtomicClearBits(mask LPMCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMLPMCCR struct{ mmio.UM32 }

func (rm RMLPMCCR) Load() LPMCCR   { return LPMCCR(rm.UM32.Load()) }
func (rm RMLPMCCR) Store(b LPMCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VLPSIZE() RMLPMCCR {
	return RMLPMCCR{mmio.UM32{&p.LPMCCR.U32, uint32(VLPSIZE)}}
}

func (p *DSI_Periph) LPSIZE() RMLPMCCR {
	return RMLPMCCR{mmio.UM32{&p.LPMCCR.U32, uint32(LPSIZE)}}
}

type VMCCR uint32

func (b VMCCR) Field(mask VMCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VMCCR) J(v int) VMCCR {
	return VMCCR(bits.MakeField32(v, uint32(mask)))
}

type RVMCCR struct{ mmio.U32 }

func (r *RVMCCR) Bits(mask VMCCR) VMCCR   { return VMCCR(r.U32.Bits(uint32(mask))) }
func (r *RVMCCR) StoreBits(mask, b VMCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVMCCR) SetBits(mask VMCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVMCCR) ClearBits(mask VMCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVMCCR) Load() VMCCR             { return VMCCR(r.U32.Load()) }
func (r *RVMCCR) Store(b VMCCR)           { r.U32.Store(uint32(b)) }

func (r *RVMCCR) AtomicStoreBits(mask, b VMCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVMCCR) AtomicSetBits(mask VMCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVMCCR) AtomicClearBits(mask VMCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVMCCR struct{ mmio.UM32 }

func (rm RMVMCCR) Load() VMCCR   { return VMCCR(rm.UM32.Load()) }
func (rm RMVMCCR) Store(b VMCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VMT() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(VMT)}}
}

func (p *DSI_Periph) LPVSAE() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(LPVSAE)}}
}

func (p *DSI_Periph) LPVBPE() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(LPVBPE)}}
}

func (p *DSI_Periph) LPVFPE() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(LPVFPE)}}
}

func (p *DSI_Periph) LPVAE() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(LPVAE)}}
}

func (p *DSI_Periph) LPHBPE() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(LPHBPE)}}
}

func (p *DSI_Periph) LPHFE() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(LPHFE)}}
}

func (p *DSI_Periph) FBTAAE() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(FBTAAE)}}
}

func (p *DSI_Periph) LPCE() RMVMCCR {
	return RMVMCCR{mmio.UM32{&p.VMCCR.U32, uint32(LPCE)}}
}

type VPCCR uint32

func (b VPCCR) Field(mask VPCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VPCCR) J(v int) VPCCR {
	return VPCCR(bits.MakeField32(v, uint32(mask)))
}

type RVPCCR struct{ mmio.U32 }

func (r *RVPCCR) Bits(mask VPCCR) VPCCR   { return VPCCR(r.U32.Bits(uint32(mask))) }
func (r *RVPCCR) StoreBits(mask, b VPCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVPCCR) SetBits(mask VPCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVPCCR) ClearBits(mask VPCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVPCCR) Load() VPCCR             { return VPCCR(r.U32.Load()) }
func (r *RVPCCR) Store(b VPCCR)           { r.U32.Store(uint32(b)) }

func (r *RVPCCR) AtomicStoreBits(mask, b VPCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVPCCR) AtomicSetBits(mask VPCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVPCCR) AtomicClearBits(mask VPCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVPCCR struct{ mmio.UM32 }

func (rm RMVPCCR) Load() VPCCR   { return VPCCR(rm.UM32.Load()) }
func (rm RMVPCCR) Store(b VPCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VPSIZE() RMVPCCR {
	return RMVPCCR{mmio.UM32{&p.VPCCR.U32, uint32(VPSIZE)}}
}

type VCCCR uint32

func (b VCCCR) Field(mask VCCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VCCCR) J(v int) VCCCR {
	return VCCCR(bits.MakeField32(v, uint32(mask)))
}

type RVCCCR struct{ mmio.U32 }

func (r *RVCCCR) Bits(mask VCCCR) VCCCR   { return VCCCR(r.U32.Bits(uint32(mask))) }
func (r *RVCCCR) StoreBits(mask, b VCCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVCCCR) SetBits(mask VCCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVCCCR) ClearBits(mask VCCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVCCCR) Load() VCCCR             { return VCCCR(r.U32.Load()) }
func (r *RVCCCR) Store(b VCCCR)           { r.U32.Store(uint32(b)) }

func (r *RVCCCR) AtomicStoreBits(mask, b VCCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVCCCR) AtomicSetBits(mask VCCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVCCCR) AtomicClearBits(mask VCCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVCCCR struct{ mmio.UM32 }

func (rm RMVCCCR) Load() VCCCR   { return VCCCR(rm.UM32.Load()) }
func (rm RMVCCCR) Store(b VCCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) NUMC() RMVCCCR {
	return RMVCCCR{mmio.UM32{&p.VCCCR.U32, uint32(NUMC)}}
}

type VNPCCR uint32

func (b VNPCCR) Field(mask VNPCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VNPCCR) J(v int) VNPCCR {
	return VNPCCR(bits.MakeField32(v, uint32(mask)))
}

type RVNPCCR struct{ mmio.U32 }

func (r *RVNPCCR) Bits(mask VNPCCR) VNPCCR  { return VNPCCR(r.U32.Bits(uint32(mask))) }
func (r *RVNPCCR) StoreBits(mask, b VNPCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVNPCCR) SetBits(mask VNPCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVNPCCR) ClearBits(mask VNPCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVNPCCR) Load() VNPCCR             { return VNPCCR(r.U32.Load()) }
func (r *RVNPCCR) Store(b VNPCCR)           { r.U32.Store(uint32(b)) }

func (r *RVNPCCR) AtomicStoreBits(mask, b VNPCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVNPCCR) AtomicSetBits(mask VNPCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVNPCCR) AtomicClearBits(mask VNPCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVNPCCR struct{ mmio.UM32 }

func (rm RMVNPCCR) Load() VNPCCR   { return VNPCCR(rm.UM32.Load()) }
func (rm RMVNPCCR) Store(b VNPCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) NPSIZE() RMVNPCCR {
	return RMVNPCCR{mmio.UM32{&p.VNPCCR.U32, uint32(NPSIZE)}}
}

type VHSACCR uint32

func (b VHSACCR) Field(mask VHSACCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VHSACCR) J(v int) VHSACCR {
	return VHSACCR(bits.MakeField32(v, uint32(mask)))
}

type RVHSACCR struct{ mmio.U32 }

func (r *RVHSACCR) Bits(mask VHSACCR) VHSACCR { return VHSACCR(r.U32.Bits(uint32(mask))) }
func (r *RVHSACCR) StoreBits(mask, b VHSACCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVHSACCR) SetBits(mask VHSACCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVHSACCR) ClearBits(mask VHSACCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVHSACCR) Load() VHSACCR             { return VHSACCR(r.U32.Load()) }
func (r *RVHSACCR) Store(b VHSACCR)           { r.U32.Store(uint32(b)) }

func (r *RVHSACCR) AtomicStoreBits(mask, b VHSACCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVHSACCR) AtomicSetBits(mask VHSACCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVHSACCR) AtomicClearBits(mask VHSACCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVHSACCR struct{ mmio.UM32 }

func (rm RMVHSACCR) Load() VHSACCR   { return VHSACCR(rm.UM32.Load()) }
func (rm RMVHSACCR) Store(b VHSACCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) HSA() RMVHSACCR {
	return RMVHSACCR{mmio.UM32{&p.VHSACCR.U32, uint32(HSA)}}
}

type VHBPCCR uint32

func (b VHBPCCR) Field(mask VHBPCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VHBPCCR) J(v int) VHBPCCR {
	return VHBPCCR(bits.MakeField32(v, uint32(mask)))
}

type RVHBPCCR struct{ mmio.U32 }

func (r *RVHBPCCR) Bits(mask VHBPCCR) VHBPCCR { return VHBPCCR(r.U32.Bits(uint32(mask))) }
func (r *RVHBPCCR) StoreBits(mask, b VHBPCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVHBPCCR) SetBits(mask VHBPCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVHBPCCR) ClearBits(mask VHBPCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVHBPCCR) Load() VHBPCCR             { return VHBPCCR(r.U32.Load()) }
func (r *RVHBPCCR) Store(b VHBPCCR)           { r.U32.Store(uint32(b)) }

func (r *RVHBPCCR) AtomicStoreBits(mask, b VHBPCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVHBPCCR) AtomicSetBits(mask VHBPCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVHBPCCR) AtomicClearBits(mask VHBPCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVHBPCCR struct{ mmio.UM32 }

func (rm RMVHBPCCR) Load() VHBPCCR   { return VHBPCCR(rm.UM32.Load()) }
func (rm RMVHBPCCR) Store(b VHBPCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) HBP() RMVHBPCCR {
	return RMVHBPCCR{mmio.UM32{&p.VHBPCCR.U32, uint32(HBP)}}
}

type VLCCR uint32

func (b VLCCR) Field(mask VLCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VLCCR) J(v int) VLCCR {
	return VLCCR(bits.MakeField32(v, uint32(mask)))
}

type RVLCCR struct{ mmio.U32 }

func (r *RVLCCR) Bits(mask VLCCR) VLCCR   { return VLCCR(r.U32.Bits(uint32(mask))) }
func (r *RVLCCR) StoreBits(mask, b VLCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVLCCR) SetBits(mask VLCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVLCCR) ClearBits(mask VLCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVLCCR) Load() VLCCR             { return VLCCR(r.U32.Load()) }
func (r *RVLCCR) Store(b VLCCR)           { r.U32.Store(uint32(b)) }

func (r *RVLCCR) AtomicStoreBits(mask, b VLCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVLCCR) AtomicSetBits(mask VLCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVLCCR) AtomicClearBits(mask VLCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVLCCR struct{ mmio.UM32 }

func (rm RMVLCCR) Load() VLCCR   { return VLCCR(rm.UM32.Load()) }
func (rm RMVLCCR) Store(b VLCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) HLINE() RMVLCCR {
	return RMVLCCR{mmio.UM32{&p.VLCCR.U32, uint32(HLINE)}}
}

type VVSACCR uint32

func (b VVSACCR) Field(mask VVSACCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VVSACCR) J(v int) VVSACCR {
	return VVSACCR(bits.MakeField32(v, uint32(mask)))
}

type RVVSACCR struct{ mmio.U32 }

func (r *RVVSACCR) Bits(mask VVSACCR) VVSACCR { return VVSACCR(r.U32.Bits(uint32(mask))) }
func (r *RVVSACCR) StoreBits(mask, b VVSACCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVVSACCR) SetBits(mask VVSACCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVVSACCR) ClearBits(mask VVSACCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVVSACCR) Load() VVSACCR             { return VVSACCR(r.U32.Load()) }
func (r *RVVSACCR) Store(b VVSACCR)           { r.U32.Store(uint32(b)) }

func (r *RVVSACCR) AtomicStoreBits(mask, b VVSACCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVVSACCR) AtomicSetBits(mask VVSACCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVVSACCR) AtomicClearBits(mask VVSACCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVVSACCR struct{ mmio.UM32 }

func (rm RMVVSACCR) Load() VVSACCR   { return VVSACCR(rm.UM32.Load()) }
func (rm RMVVSACCR) Store(b VVSACCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VSA() RMVVSACCR {
	return RMVVSACCR{mmio.UM32{&p.VVSACCR.U32, uint32(VSA)}}
}

type VVBPCCR uint32

func (b VVBPCCR) Field(mask VVBPCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VVBPCCR) J(v int) VVBPCCR {
	return VVBPCCR(bits.MakeField32(v, uint32(mask)))
}

type RVVBPCCR struct{ mmio.U32 }

func (r *RVVBPCCR) Bits(mask VVBPCCR) VVBPCCR { return VVBPCCR(r.U32.Bits(uint32(mask))) }
func (r *RVVBPCCR) StoreBits(mask, b VVBPCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVVBPCCR) SetBits(mask VVBPCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVVBPCCR) ClearBits(mask VVBPCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVVBPCCR) Load() VVBPCCR             { return VVBPCCR(r.U32.Load()) }
func (r *RVVBPCCR) Store(b VVBPCCR)           { r.U32.Store(uint32(b)) }

func (r *RVVBPCCR) AtomicStoreBits(mask, b VVBPCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVVBPCCR) AtomicSetBits(mask VVBPCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVVBPCCR) AtomicClearBits(mask VVBPCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVVBPCCR struct{ mmio.UM32 }

func (rm RMVVBPCCR) Load() VVBPCCR   { return VVBPCCR(rm.UM32.Load()) }
func (rm RMVVBPCCR) Store(b VVBPCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VBP() RMVVBPCCR {
	return RMVVBPCCR{mmio.UM32{&p.VVBPCCR.U32, uint32(VBP)}}
}

type VVFPCCR uint32

func (b VVFPCCR) Field(mask VVFPCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VVFPCCR) J(v int) VVFPCCR {
	return VVFPCCR(bits.MakeField32(v, uint32(mask)))
}

type RVVFPCCR struct{ mmio.U32 }

func (r *RVVFPCCR) Bits(mask VVFPCCR) VVFPCCR { return VVFPCCR(r.U32.Bits(uint32(mask))) }
func (r *RVVFPCCR) StoreBits(mask, b VVFPCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVVFPCCR) SetBits(mask VVFPCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVVFPCCR) ClearBits(mask VVFPCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVVFPCCR) Load() VVFPCCR             { return VVFPCCR(r.U32.Load()) }
func (r *RVVFPCCR) Store(b VVFPCCR)           { r.U32.Store(uint32(b)) }

func (r *RVVFPCCR) AtomicStoreBits(mask, b VVFPCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVVFPCCR) AtomicSetBits(mask VVFPCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVVFPCCR) AtomicClearBits(mask VVFPCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVVFPCCR struct{ mmio.UM32 }

func (rm RMVVFPCCR) Load() VVFPCCR   { return VVFPCCR(rm.UM32.Load()) }
func (rm RMVVFPCCR) Store(b VVFPCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VFP() RMVVFPCCR {
	return RMVVFPCCR{mmio.UM32{&p.VVFPCCR.U32, uint32(VFP)}}
}

type VVACCR uint32

func (b VVACCR) Field(mask VVACCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VVACCR) J(v int) VVACCR {
	return VVACCR(bits.MakeField32(v, uint32(mask)))
}

type RVVACCR struct{ mmio.U32 }

func (r *RVVACCR) Bits(mask VVACCR) VVACCR  { return VVACCR(r.U32.Bits(uint32(mask))) }
func (r *RVVACCR) StoreBits(mask, b VVACCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVVACCR) SetBits(mask VVACCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RVVACCR) ClearBits(mask VVACCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVVACCR) Load() VVACCR             { return VVACCR(r.U32.Load()) }
func (r *RVVACCR) Store(b VVACCR)           { r.U32.Store(uint32(b)) }

func (r *RVVACCR) AtomicStoreBits(mask, b VVACCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVVACCR) AtomicSetBits(mask VVACCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVVACCR) AtomicClearBits(mask VVACCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVVACCR struct{ mmio.UM32 }

func (rm RMVVACCR) Load() VVACCR   { return VVACCR(rm.UM32.Load()) }
func (rm RMVVACCR) Store(b VVACCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) VA() RMVVACCR {
	return RMVVACCR{mmio.UM32{&p.VVACCR.U32, uint32(VA)}}
}

type TDCCR uint32

func (b TDCCR) Field(mask TDCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TDCCR) J(v int) TDCCR {
	return TDCCR(bits.MakeField32(v, uint32(mask)))
}

type RTDCCR struct{ mmio.U32 }

func (r *RTDCCR) Bits(mask TDCCR) TDCCR   { return TDCCR(r.U32.Bits(uint32(mask))) }
func (r *RTDCCR) StoreBits(mask, b TDCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTDCCR) SetBits(mask TDCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RTDCCR) ClearBits(mask TDCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTDCCR) Load() TDCCR             { return TDCCR(r.U32.Load()) }
func (r *RTDCCR) Store(b TDCCR)           { r.U32.Store(uint32(b)) }

func (r *RTDCCR) AtomicStoreBits(mask, b TDCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RTDCCR) AtomicSetBits(mask TDCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RTDCCR) AtomicClearBits(mask TDCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMTDCCR struct{ mmio.UM32 }

func (rm RMTDCCR) Load() TDCCR   { return TDCCR(rm.UM32.Load()) }
func (rm RMTDCCR) Store(b TDCCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) V3DM() RMTDCCR {
	return RMTDCCR{mmio.UM32{&p.TDCCR.U32, uint32(V3DM)}}
}

func (p *DSI_Periph) V3DF() RMTDCCR {
	return RMTDCCR{mmio.UM32{&p.TDCCR.U32, uint32(V3DF)}}
}

func (p *DSI_Periph) SVS() RMTDCCR {
	return RMTDCCR{mmio.UM32{&p.TDCCR.U32, uint32(SVS)}}
}

func (p *DSI_Periph) RF() RMTDCCR {
	return RMTDCCR{mmio.UM32{&p.TDCCR.U32, uint32(RF)}}
}

func (p *DSI_Periph) S3DC() RMTDCCR {
	return RMTDCCR{mmio.UM32{&p.TDCCR.U32, uint32(S3DC)}}
}

type WCFGR uint32

func (b WCFGR) Field(mask WCFGR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WCFGR) J(v int) WCFGR {
	return WCFGR(bits.MakeField32(v, uint32(mask)))
}

type RWCFGR struct{ mmio.U32 }

func (r *RWCFGR) Bits(mask WCFGR) WCFGR   { return WCFGR(r.U32.Bits(uint32(mask))) }
func (r *RWCFGR) StoreBits(mask, b WCFGR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWCFGR) SetBits(mask WCFGR)      { r.U32.SetBits(uint32(mask)) }
func (r *RWCFGR) ClearBits(mask WCFGR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWCFGR) Load() WCFGR             { return WCFGR(r.U32.Load()) }
func (r *RWCFGR) Store(b WCFGR)           { r.U32.Store(uint32(b)) }

func (r *RWCFGR) AtomicStoreBits(mask, b WCFGR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWCFGR) AtomicSetBits(mask WCFGR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWCFGR) AtomicClearBits(mask WCFGR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWCFGR struct{ mmio.UM32 }

func (rm RMWCFGR) Load() WCFGR   { return WCFGR(rm.UM32.Load()) }
func (rm RMWCFGR) Store(b WCFGR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) DSIM() RMWCFGR {
	return RMWCFGR{mmio.UM32{&p.WCFGR.U32, uint32(DSIM)}}
}

func (p *DSI_Periph) COLMUX() RMWCFGR {
	return RMWCFGR{mmio.UM32{&p.WCFGR.U32, uint32(COLMUX)}}
}

func (p *DSI_Periph) TESRC() RMWCFGR {
	return RMWCFGR{mmio.UM32{&p.WCFGR.U32, uint32(TESRC)}}
}

func (p *DSI_Periph) TEPOL() RMWCFGR {
	return RMWCFGR{mmio.UM32{&p.WCFGR.U32, uint32(TEPOL)}}
}

func (p *DSI_Periph) AR() RMWCFGR {
	return RMWCFGR{mmio.UM32{&p.WCFGR.U32, uint32(AR)}}
}

func (p *DSI_Periph) VSPOL() RMWCFGR {
	return RMWCFGR{mmio.UM32{&p.WCFGR.U32, uint32(VSPOL)}}
}

type WCR uint32

func (b WCR) Field(mask WCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WCR) J(v int) WCR {
	return WCR(bits.MakeField32(v, uint32(mask)))
}

type RWCR struct{ mmio.U32 }

func (r *RWCR) Bits(mask WCR) WCR     { return WCR(r.U32.Bits(uint32(mask))) }
func (r *RWCR) StoreBits(mask, b WCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWCR) SetBits(mask WCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RWCR) ClearBits(mask WCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWCR) Load() WCR             { return WCR(r.U32.Load()) }
func (r *RWCR) Store(b WCR)           { r.U32.Store(uint32(b)) }

func (r *RWCR) AtomicStoreBits(mask, b WCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWCR) AtomicSetBits(mask WCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWCR) AtomicClearBits(mask WCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWCR struct{ mmio.UM32 }

func (rm RMWCR) Load() WCR   { return WCR(rm.UM32.Load()) }
func (rm RMWCR) Store(b WCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) COLM() RMWCR {
	return RMWCR{mmio.UM32{&p.WCR.U32, uint32(COLM)}}
}

func (p *DSI_Periph) SHTDN() RMWCR {
	return RMWCR{mmio.UM32{&p.WCR.U32, uint32(SHTDN)}}
}

func (p *DSI_Periph) LTDCEN() RMWCR {
	return RMWCR{mmio.UM32{&p.WCR.U32, uint32(LTDCEN)}}
}

func (p *DSI_Periph) DSIEN() RMWCR {
	return RMWCR{mmio.UM32{&p.WCR.U32, uint32(DSIEN)}}
}

type WIER uint32

func (b WIER) Field(mask WIER) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WIER) J(v int) WIER {
	return WIER(bits.MakeField32(v, uint32(mask)))
}

type RWIER struct{ mmio.U32 }

func (r *RWIER) Bits(mask WIER) WIER    { return WIER(r.U32.Bits(uint32(mask))) }
func (r *RWIER) StoreBits(mask, b WIER) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWIER) SetBits(mask WIER)      { r.U32.SetBits(uint32(mask)) }
func (r *RWIER) ClearBits(mask WIER)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWIER) Load() WIER             { return WIER(r.U32.Load()) }
func (r *RWIER) Store(b WIER)           { r.U32.Store(uint32(b)) }

func (r *RWIER) AtomicStoreBits(mask, b WIER) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWIER) AtomicSetBits(mask WIER)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWIER) AtomicClearBits(mask WIER)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWIER struct{ mmio.UM32 }

func (rm RMWIER) Load() WIER   { return WIER(rm.UM32.Load()) }
func (rm RMWIER) Store(b WIER) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) TEIE() RMWIER {
	return RMWIER{mmio.UM32{&p.WIER.U32, uint32(TEIE)}}
}

func (p *DSI_Periph) ERIE() RMWIER {
	return RMWIER{mmio.UM32{&p.WIER.U32, uint32(ERIE)}}
}

func (p *DSI_Periph) PLLLIE() RMWIER {
	return RMWIER{mmio.UM32{&p.WIER.U32, uint32(PLLLIE)}}
}

func (p *DSI_Periph) PLLUIE() RMWIER {
	return RMWIER{mmio.UM32{&p.WIER.U32, uint32(PLLUIE)}}
}

func (p *DSI_Periph) RRIE() RMWIER {
	return RMWIER{mmio.UM32{&p.WIER.U32, uint32(RRIE)}}
}

type WISR uint32

func (b WISR) Field(mask WISR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WISR) J(v int) WISR {
	return WISR(bits.MakeField32(v, uint32(mask)))
}

type RWISR struct{ mmio.U32 }

func (r *RWISR) Bits(mask WISR) WISR    { return WISR(r.U32.Bits(uint32(mask))) }
func (r *RWISR) StoreBits(mask, b WISR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWISR) SetBits(mask WISR)      { r.U32.SetBits(uint32(mask)) }
func (r *RWISR) ClearBits(mask WISR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWISR) Load() WISR             { return WISR(r.U32.Load()) }
func (r *RWISR) Store(b WISR)           { r.U32.Store(uint32(b)) }

func (r *RWISR) AtomicStoreBits(mask, b WISR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWISR) AtomicSetBits(mask WISR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWISR) AtomicClearBits(mask WISR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWISR struct{ mmio.UM32 }

func (rm RMWISR) Load() WISR   { return WISR(rm.UM32.Load()) }
func (rm RMWISR) Store(b WISR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) TEIF() RMWISR {
	return RMWISR{mmio.UM32{&p.WISR.U32, uint32(TEIF)}}
}

func (p *DSI_Periph) ERIF() RMWISR {
	return RMWISR{mmio.UM32{&p.WISR.U32, uint32(ERIF)}}
}

func (p *DSI_Periph) BUSY() RMWISR {
	return RMWISR{mmio.UM32{&p.WISR.U32, uint32(BUSY)}}
}

func (p *DSI_Periph) PLLLS() RMWISR {
	return RMWISR{mmio.UM32{&p.WISR.U32, uint32(PLLLS)}}
}

func (p *DSI_Periph) PLLLIF() RMWISR {
	return RMWISR{mmio.UM32{&p.WISR.U32, uint32(PLLLIF)}}
}

func (p *DSI_Periph) PLLUIF() RMWISR {
	return RMWISR{mmio.UM32{&p.WISR.U32, uint32(PLLUIF)}}
}

func (p *DSI_Periph) RRS() RMWISR {
	return RMWISR{mmio.UM32{&p.WISR.U32, uint32(RRS)}}
}

func (p *DSI_Periph) RRIF() RMWISR {
	return RMWISR{mmio.UM32{&p.WISR.U32, uint32(RRIF)}}
}

type WIFCR uint32

func (b WIFCR) Field(mask WIFCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WIFCR) J(v int) WIFCR {
	return WIFCR(bits.MakeField32(v, uint32(mask)))
}

type RWIFCR struct{ mmio.U32 }

func (r *RWIFCR) Bits(mask WIFCR) WIFCR   { return WIFCR(r.U32.Bits(uint32(mask))) }
func (r *RWIFCR) StoreBits(mask, b WIFCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWIFCR) SetBits(mask WIFCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RWIFCR) ClearBits(mask WIFCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWIFCR) Load() WIFCR             { return WIFCR(r.U32.Load()) }
func (r *RWIFCR) Store(b WIFCR)           { r.U32.Store(uint32(b)) }

func (r *RWIFCR) AtomicStoreBits(mask, b WIFCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWIFCR) AtomicSetBits(mask WIFCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWIFCR) AtomicClearBits(mask WIFCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWIFCR struct{ mmio.UM32 }

func (rm RMWIFCR) Load() WIFCR   { return WIFCR(rm.UM32.Load()) }
func (rm RMWIFCR) Store(b WIFCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) CTEIF() RMWIFCR {
	return RMWIFCR{mmio.UM32{&p.WIFCR.U32, uint32(CTEIF)}}
}

func (p *DSI_Periph) CERIF() RMWIFCR {
	return RMWIFCR{mmio.UM32{&p.WIFCR.U32, uint32(CERIF)}}
}

func (p *DSI_Periph) CPLLLIF() RMWIFCR {
	return RMWIFCR{mmio.UM32{&p.WIFCR.U32, uint32(CPLLLIF)}}
}

func (p *DSI_Periph) CPLLUIF() RMWIFCR {
	return RMWIFCR{mmio.UM32{&p.WIFCR.U32, uint32(CPLLUIF)}}
}

func (p *DSI_Periph) CRRIF() RMWIFCR {
	return RMWIFCR{mmio.UM32{&p.WIFCR.U32, uint32(CRRIF)}}
}

type WPCR uint32

func (b WPCR) Field(mask WPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WPCR) J(v int) WPCR {
	return WPCR(bits.MakeField32(v, uint32(mask)))
}

type RWPCR struct{ mmio.U32 }

func (r *RWPCR) Bits(mask WPCR) WPCR    { return WPCR(r.U32.Bits(uint32(mask))) }
func (r *RWPCR) StoreBits(mask, b WPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWPCR) SetBits(mask WPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RWPCR) ClearBits(mask WPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWPCR) Load() WPCR             { return WPCR(r.U32.Load()) }
func (r *RWPCR) Store(b WPCR)           { r.U32.Store(uint32(b)) }

func (r *RWPCR) AtomicStoreBits(mask, b WPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWPCR) AtomicSetBits(mask WPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWPCR) AtomicClearBits(mask WPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWPCR struct{ mmio.UM32 }

func (rm RMWPCR) Load() WPCR   { return WPCR(rm.UM32.Load()) }
func (rm RMWPCR) Store(b WPCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) HSTXDCL(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(HSTXDCL)}}
}

func (p *DSI_Periph) HSTXDDL(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(HSTXDDL)}}
}

func (p *DSI_Periph) LPSRCCL(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(LPSRCCL)}}
}

func (p *DSI_Periph) LPSRCDL(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(LPSRCDL)}}
}

func (p *DSI_Periph) SDDC(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(SDDC)}}
}

func (p *DSI_Periph) LPRXVCDL(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(LPRXVCDL)}}
}

func (p *DSI_Periph) HSTXSRCCL(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(HSTXSRCCL)}}
}

func (p *DSI_Periph) HSTXSRCDL(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(HSTXSRCDL)}}
}

func (p *DSI_Periph) FLPRXLPM(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(FLPRXLPM)}}
}

func (p *DSI_Periph) LPRXFT(n int) RMWPCR {
	return RMWPCR{mmio.UM32{&p.WPCR[n].U32, uint32(LPRXFT)}}
}

type WRPCR uint32

func (b WRPCR) Field(mask WRPCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRPCR) J(v int) WRPCR {
	return WRPCR(bits.MakeField32(v, uint32(mask)))
}

type RWRPCR struct{ mmio.U32 }

func (r *RWRPCR) Bits(mask WRPCR) WRPCR   { return WRPCR(r.U32.Bits(uint32(mask))) }
func (r *RWRPCR) StoreBits(mask, b WRPCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRPCR) SetBits(mask WRPCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRPCR) ClearBits(mask WRPCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRPCR) Load() WRPCR             { return WRPCR(r.U32.Load()) }
func (r *RWRPCR) Store(b WRPCR)           { r.U32.Store(uint32(b)) }

func (r *RWRPCR) AtomicStoreBits(mask, b WRPCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRPCR) AtomicSetBits(mask WRPCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRPCR) AtomicClearBits(mask WRPCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRPCR struct{ mmio.UM32 }

func (rm RMWRPCR) Load() WRPCR   { return WRPCR(rm.UM32.Load()) }
func (rm RMWRPCR) Store(b WRPCR) { rm.UM32.Store(uint32(b)) }

func (p *DSI_Periph) PLLEN() RMWRPCR {
	return RMWRPCR{mmio.UM32{&p.WRPCR.U32, uint32(PLLEN)}}
}

func (p *DSI_Periph) PLL_NDIV() RMWRPCR {
	return RMWRPCR{mmio.UM32{&p.WRPCR.U32, uint32(PLL_NDIV)}}
}

func (p *DSI_Periph) PLL_IDF() RMWRPCR {
	return RMWRPCR{mmio.UM32{&p.WRPCR.U32, uint32(PLL_IDF)}}
}

func (p *DSI_Periph) PLL_ODF() RMWRPCR {
	return RMWRPCR{mmio.UM32{&p.WRPCR.U32, uint32(PLL_ODF)}}
}

func (p *DSI_Periph) REGEN() RMWRPCR {
	return RMWRPCR{mmio.UM32{&p.WRPCR.U32, uint32(REGEN)}}
}
